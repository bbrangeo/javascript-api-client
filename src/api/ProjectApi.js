/**
 * BIMData API
 * BIMData API documentation
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Classification', 'model/Folder', 'model/FosUser', 'model/FosUserWrite', 'model/Project'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Classification'), require('../model/Folder'), require('../model/FosUser'), require('../model/FosUserWrite'), require('../model/Project'));
  } else {
    // Browser globals (root is window)
    if (!root.bimdata) {
      root.bimdata = {};
    }
    root.bimdata.ProjectApi = factory(root.bimdata.ApiClient, root.bimdata.Classification, root.bimdata.Folder, root.bimdata.FosUser, root.bimdata.FosUserWrite, root.bimdata.Project);
  }
}(this, function(ApiClient, Classification, Folder, FosUser, FosUserWrite, Project) {
  'use strict';

  /**
   * Project service.
   * @module api/ProjectApi
   * @version 1.0.8
   */

  /**
   * Constructs a new ProjectApi. 
   * @alias module:api/ProjectApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createClassification operation.
     * @callback module:api/ProjectApi~createClassificationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Classification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors          If created classification already exists, it will not be duplicated and the previous one will be returned.     You also can add a &#39;classification&#39; filter on this endpoint. By ex: /classification?name&#x3D;&#39;untec&#39;. The name is case sensitive     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {Array.<module:model/Classification>} data 
     * @param {module:api/ProjectApi~createClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Classification>}
     */
    this.createClassification = function(projectPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassification");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassification");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createClassification");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Classification];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDocument operation.
     * @callback module:api/ProjectApi~createDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id 
     * @param {Number} opts.parent 
     * @param {Number} opts.parentId 
     * @param {Number} opts.creator 
     * @param {Number} opts.project 
     * @param {Number} opts.projectId 
     * @param {String} opts.fileName 
     * @param {String} opts.description 
     * @param {File} opts.file 
     * @param {String} opts.size 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.ifcId 
     * @param {module:api/ProjectApi~createDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createDocument = function(projectPk, cloudPk, name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createDocument");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createDocument");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createDocument");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'id': opts['id'],
        'parent': opts['parent'],
        'parent_id': opts['parentId'],
        'creator': opts['creator'],
        'project': opts['project'],
        'project_id': opts['projectId'],
        'name': name,
        'file_name': opts['fileName'],
        'description': opts['description'],
        'file': opts['file'],
        'size': opts['size'],
        'created_at': opts['createdAt'],
        'updated_at': opts['updatedAt'],
        'ifc_id': opts['ifcId']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFolder operation.
     * @callback module:api/ProjectApi~createFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:model/Folder} data 
     * @param {module:api/ProjectApi~createFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    this.createFolder = function(projectPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createFolder");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createFolder");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createFolder");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Folder;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} cloudPk 
     * @param {module:model/Project} data 
     * @param {module:api/ProjectApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.createProject = function(cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createProject");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createProject");
      }


      var pathParams = {
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectUser operation.
     * @callback module:api/ProjectApi~createProjectUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FosUserWrite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:model/FosUserWrite} data 
     * @param {module:api/ProjectApi~createProjectUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FosUserWrite}
     */
    this.createProjectUser = function(projectPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createProjectUser");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createProjectUser");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createProjectUser");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FosUserWrite;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/user', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClassification operation.
     * @callback module:api/ProjectApi~deleteClassificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~deleteClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteClassification = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteClassification");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClassification");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteClassification");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDocument operation.
     * @callback module:api/ProjectApi~deleteDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~deleteDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDocument = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteDocument");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDocument");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteDocument");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFolder operation.
     * @callback module:api/ProjectApi~deleteFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~deleteFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFolder = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteFolder");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFolder");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteFolder");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProject = function(id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProject");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteProject");
      }


      var pathParams = {
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectUser operation.
     * @callback module:api/ProjectApi~deleteProjectUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~deleteProjectUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProjectUser = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteProjectUser");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectUser");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteProjectUser");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/user/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateClassification operation.
     * @callback module:api/ProjectApi~fullUpdateClassificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:model/Classification} data 
     * @param {module:api/ProjectApi~fullUpdateClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Classification}
     */
    this.fullUpdateClassification = function(projectPk, id, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateClassification");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateClassification");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateClassification");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateClassification");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Classification;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateDocument operation.
     * @callback module:api/ProjectApi~fullUpdateDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id2 
     * @param {Number} opts.parent 
     * @param {Number} opts.parentId 
     * @param {Number} opts.creator 
     * @param {Number} opts.project 
     * @param {Number} opts.projectId 
     * @param {String} opts.fileName 
     * @param {String} opts.description 
     * @param {File} opts.file 
     * @param {String} opts.size 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.ifcId 
     * @param {module:api/ProjectApi~fullUpdateDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.fullUpdateDocument = function(projectPk, id, cloudPk, name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateDocument");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateDocument");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateDocument");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling fullUpdateDocument");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'id': opts['id2'],
        'parent': opts['parent'],
        'parent_id': opts['parentId'],
        'creator': opts['creator'],
        'project': opts['project'],
        'project_id': opts['projectId'],
        'name': name,
        'file_name': opts['fileName'],
        'description': opts['description'],
        'file': opts['file'],
        'size': opts['size'],
        'created_at': opts['createdAt'],
        'updated_at': opts['updatedAt'],
        'ifc_id': opts['ifcId']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateFolder operation.
     * @callback module:api/ProjectApi~fullUpdateFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:model/Folder} data 
     * @param {module:api/ProjectApi~fullUpdateFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    this.fullUpdateFolder = function(projectPk, id, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateFolder");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateFolder");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateFolder");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateFolder");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Folder;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateProject operation.
     * @callback module:api/ProjectApi~fullUpdateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:model/Project} data 
     * @param {module:api/ProjectApi~fullUpdateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.fullUpdateProject = function(id, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateProject");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateProject");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateProject");
      }


      var pathParams = {
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateProjectUser operation.
     * @callback module:api/ProjectApi~fullUpdateProjectUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FosUserWrite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:model/FosUserWrite} data 
     * @param {module:api/ProjectApi~fullUpdateProjectUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FosUserWrite}
     */
    this.fullUpdateProjectUser = function(projectPk, id, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateProjectUser");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateProjectUser");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateProjectUser");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateProjectUser");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FosUserWrite;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/user/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClassification operation.
     * @callback module:api/ProjectApi~getClassificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Classification}
     */
    this.getClassification = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getClassification");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClassification");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getClassification");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Classification;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClassifications operation.
     * @callback module:api/ProjectApi~getClassificationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Classification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getClassificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Classification>}
     */
    this.getClassifications = function(projectPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getClassifications");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getClassifications");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Classification];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocument operation.
     * @callback module:api/ProjectApi~getDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDocument = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getDocument");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDocument");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getDocument");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocuments operation.
     * @callback module:api/ProjectApi~getDocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDocuments = function(projectPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getDocuments");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getDocuments");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolder operation.
     * @callback module:api/ProjectApi~getFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    this.getFolder = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getFolder");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFolder");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getFolder");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Folder;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolders operation.
     * @callback module:api/ProjectApi~getFoldersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Folder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Folder>}
     */
    this.getFolders = function(projectPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getFolders");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getFolders");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Folder];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.getProject = function(id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProject");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProject");
      }


      var pathParams = {
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectTree operation.
     * @callback module:api/ProjectApi~getProjectTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the document tree from root folder
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getProjectTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    this.getProjectTree = function(id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectTree");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectTree");
      }


      var pathParams = {
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Folder;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}/tree', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectUser operation.
     * @callback module:api/ProjectApi~getProjectUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FosUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getProjectUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FosUser}
     */
    this.getProjectUser = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProjectUser");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectUser");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectUser");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FosUser;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/user/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectUsers operation.
     * @callback module:api/ProjectApi~getProjectUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FosUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getProjectUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FosUser>}
     */
    this.getProjectUsers = function(projectPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProjectUsers");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectUsers");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FosUser];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/ProjectApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} cloudPk 
     * @param {module:api/ProjectApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    this.getProjects = function(cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjects");
      }


      var pathParams = {
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Project];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClassification operation.
     * @callback module:api/ProjectApi~updateClassificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:model/Classification} data 
     * @param {module:api/ProjectApi~updateClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Classification}
     */
    this.updateClassification = function(projectPk, id, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateClassification");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateClassification");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateClassification");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateClassification");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Classification;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDocument operation.
     * @callback module:api/ProjectApi~updateDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id2 
     * @param {Number} opts.parent 
     * @param {Number} opts.parentId 
     * @param {Number} opts.creator 
     * @param {Number} opts.project 
     * @param {Number} opts.projectId 
     * @param {String} opts.fileName 
     * @param {String} opts.description 
     * @param {File} opts.file 
     * @param {String} opts.size 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.ifcId 
     * @param {module:api/ProjectApi~updateDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDocument = function(projectPk, id, cloudPk, name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateDocument");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDocument");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateDocument");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateDocument");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'id': opts['id2'],
        'parent': opts['parent'],
        'parent_id': opts['parentId'],
        'creator': opts['creator'],
        'project': opts['project'],
        'project_id': opts['projectId'],
        'name': name,
        'file_name': opts['fileName'],
        'description': opts['description'],
        'file': opts['file'],
        'size': opts['size'],
        'created_at': opts['createdAt'],
        'updated_at': opts['updatedAt'],
        'ifc_id': opts['ifcId']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFolder operation.
     * @callback module:api/ProjectApi~updateFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:model/Folder} data 
     * @param {module:api/ProjectApi~updateFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    this.updateFolder = function(projectPk, id, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateFolder");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFolder");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateFolder");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateFolder");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Folder;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/ProjectApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:model/Project} data 
     * @param {module:api/ProjectApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.updateProject = function(id, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProject");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateProject");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateProject");
      }


      var pathParams = {
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectUser operation.
     * @callback module:api/ProjectApi~updateProjectUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FosUserWrite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:model/FosUserWrite} data 
     * @param {module:api/ProjectApi~updateProjectUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FosUserWrite}
     */
    this.updateProjectUser = function(projectPk, id, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateProjectUser");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProjectUser");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateProjectUser");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateProjectUser");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FosUserWrite;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/user/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
