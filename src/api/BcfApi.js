/**
 * BIMData API
 * BIMData API documentation
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BcfProject', 'model/BimSnippet', 'model/Bitmap', 'model/Coloring', 'model/Comment', 'model/CommentEvent', 'model/Component', 'model/DocumentReference', 'model/Extensions', 'model/RelatedTopic', 'model/SelfUser', 'model/Snapshot', 'model/Topic', 'model/TopicEvents', 'model/Version', 'model/Viewpoint', 'model/Visibility'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BcfProject'), require('../model/BimSnippet'), require('../model/Bitmap'), require('../model/Coloring'), require('../model/Comment'), require('../model/CommentEvent'), require('../model/Component'), require('../model/DocumentReference'), require('../model/Extensions'), require('../model/RelatedTopic'), require('../model/SelfUser'), require('../model/Snapshot'), require('../model/Topic'), require('../model/TopicEvents'), require('../model/Version'), require('../model/Viewpoint'), require('../model/Visibility'));
  } else {
    // Browser globals (root is window)
    if (!root.bimdata) {
      root.bimdata = {};
    }
    root.bimdata.BcfApi = factory(root.bimdata.ApiClient, root.bimdata.BcfProject, root.bimdata.BimSnippet, root.bimdata.Bitmap, root.bimdata.Coloring, root.bimdata.Comment, root.bimdata.CommentEvent, root.bimdata.Component, root.bimdata.DocumentReference, root.bimdata.Extensions, root.bimdata.RelatedTopic, root.bimdata.SelfUser, root.bimdata.Snapshot, root.bimdata.Topic, root.bimdata.TopicEvents, root.bimdata.Version, root.bimdata.Viewpoint, root.bimdata.Visibility);
  }
}(this, function(ApiClient, BcfProject, BimSnippet, Bitmap, Coloring, Comment, CommentEvent, Component, DocumentReference, Extensions, RelatedTopic, SelfUser, Snapshot, Topic, TopicEvents, Version, Viewpoint, Visibility) {
  'use strict';

  /**
   * Bcf service.
   * @module api/BcfApi
   * @version 1.0.14
   */

  /**
   * Constructs a new BcfApi. 
   * @alias module:api/BcfApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the bcf21CurrentUserList operation.
     * @callback module:api/BcfApi~bcf21CurrentUserListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SelfUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/BcfApi~bcf21CurrentUserListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SelfUser>}
     */
    this.bcf21CurrentUserList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SelfUser];

      return this.apiClient.callApi(
        '/bcf/2.1/current-user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsCommentsEventsDelete = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsDelete_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsCommentsEventsDelete_0 = function(commentsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsEventsDelete = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsEventsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsEventsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsBitmapDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsViewpointsBitmapDelete = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsColoringDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsViewpointsColoringDelete = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsViewpointsDelete = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsSelectionDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsViewpointsSelectionDelete = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsVisibilityDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsViewpointsVisibilityDelete = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionsDelete operation.
     * @callback module:api/BcfApi~bcfVersionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/BcfApi~bcfVersionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcfVersionsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcfVersionsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/versions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBcfDocument operation.
     * @callback module:api/BcfApi~createBcfDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @param {module:api/BcfApi~createBcfDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createBcfDocument = function(projectsPk, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createBcfDocument");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'guid': opts['guid'],
        'filename': opts['filename']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBcfProject operation.
     * @callback module:api/BcfApi~createBcfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/BcfProject} data 
     * @param {module:api/BcfApi~createBcfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    this.createBcfProject = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createBcfProject");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBitmap operation.
     * @callback module:api/BcfApi~createBitmapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bitmap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Bitmap} data 
     * @param {module:api/BcfApi~createBitmapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bitmap}
     */
    this.createBitmap = function(viewpointsPk, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createBitmap");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createBitmap");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createBitmap");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createBitmap");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createColoring operation.
     * @callback module:api/BcfApi~createColoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Coloring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Coloring} data 
     * @param {module:api/BcfApi~createColoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Coloring}
     */
    this.createColoring = function(viewpointsPk, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createColoring");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createColoring");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createComment operation.
     * @callback module:api/BcfApi~createCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @param {module:api/BcfApi~createCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    this.createComment = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createComment");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createComment");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCommentEvent operation.
     * @callback module:api/BcfApi~createCommentEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~createCommentEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.createCommentEvent = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createCommentEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createCommentEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCommentEvent");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCommentEvent_0 operation.
     * @callback module:api/BcfApi~createCommentEvent_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~createCommentEvent_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.createCommentEvent_0 = function(commentsPk, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling createCommentEvent_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createCommentEvent_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createCommentEvent_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCommentEvent_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDocumentReference operation.
     * @callback module:api/BcfApi~createDocumentReferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @param {module:api/BcfApi~createDocumentReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentReference}
     */
    this.createDocumentReference = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createDocumentReference");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createDocumentReference");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createDocumentReference");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFile operation.
     * @callback module:api/BcfApi~createFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~createFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.createFile = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createFile");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createFile");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createFile");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRelatedTopic operation.
     * @callback module:api/BcfApi~createRelatedTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @param {module:api/BcfApi~createRelatedTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedTopic}
     */
    this.createRelatedTopic = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createRelatedTopic");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createRelatedTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createRelatedTopic");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSelection operation.
     * @callback module:api/BcfApi~createSelectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Component} data 
     * @param {module:api/BcfApi~createSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    this.createSelection = function(viewpointsPk, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createSelection");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createSelection");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSnippet operation.
     * @callback module:api/BcfApi~createSnippetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~createSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.createSnippet = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createSnippet");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createSnippet");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createSnippet");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTopic operation.
     * @callback module:api/BcfApi~createTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @param {module:api/BcfApi~createTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    this.createTopic = function(projectsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createTopic");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTopicEvent operation.
     * @callback module:api/BcfApi~createTopicEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @param {module:api/BcfApi~createTopicEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.createTopicEvent = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createTopicEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createTopicEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createTopicEvent");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVersion operation.
     * @callback module:api/BcfApi~createVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Version} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Version} data 
     * @param {module:api/BcfApi~createVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Version}
     */
    this.createVersion = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createVersion");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Version;

      return this.apiClient.callApi(
        '/bcf/versions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createViewpoint operation.
     * @callback module:api/BcfApi~createViewpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @param {module:api/BcfApi~createViewpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    this.createViewpoint = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createViewpoint");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createViewpoint");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVisibility operation.
     * @callback module:api/BcfApi~createVisibilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visibility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Visibility} data 
     * @param {module:api/BcfApi~createVisibilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visibility}
     */
    this.createVisibility = function(viewpointsPk, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createVisibility");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createVisibility");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBcfDocument operation.
     * @callback module:api/BcfApi~deleteBcfDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~deleteBcfDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBcfDocument = function(id, projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBcfDocument");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteBcfDocument");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBcfProject operation.
     * @callback module:api/BcfApi~deleteBcfProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/BcfApi~deleteBcfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBcfProject = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComment operation.
     * @callback module:api/BcfApi~deleteCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~deleteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteComment = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteComment");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDocumentReference operation.
     * @callback module:api/BcfApi~deleteDocumentReferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~deleteDocumentReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDocumentReference = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDocumentReference");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteDocumentReference");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteDocumentReference");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFile operation.
     * @callback module:api/BcfApi~deleteFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~deleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFile = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFile");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteFile");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteFile");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRelatedTopic operation.
     * @callback module:api/BcfApi~deleteRelatedTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~deleteRelatedTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRelatedTopic = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRelatedTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteRelatedTopic");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteRelatedTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSnippet operation.
     * @callback module:api/BcfApi~deleteSnippetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~deleteSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSnippet = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSnippet");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteSnippet");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteSnippet");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTopic operation.
     * @callback module:api/BcfApi~deleteTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~deleteTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTopic = function(id, projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateBcfDocument operation.
     * @callback module:api/BcfApi~fullUpdateBcfDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @param {module:api/BcfApi~fullUpdateBcfDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.fullUpdateBcfDocument = function(id, projectsPk, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateBcfDocument");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateBcfDocument");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'guid': opts['guid'],
        'filename': opts['filename']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateBcfProject operation.
     * @callback module:api/BcfApi~fullUpdateBcfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/BcfProject} data 
     * @param {module:api/BcfApi~fullUpdateBcfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    this.fullUpdateBcfProject = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateBcfProject");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateBitmap operation.
     * @callback module:api/BcfApi~fullUpdateBitmapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bitmap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Bitmap} data 
     * @param {module:api/BcfApi~fullUpdateBitmapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bitmap}
     */
    this.fullUpdateBitmap = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateBitmap");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateBitmap");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateBitmap");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateBitmap");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateBitmap");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateColoring operation.
     * @callback module:api/BcfApi~fullUpdateColoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Coloring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Coloring} data 
     * @param {module:api/BcfApi~fullUpdateColoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Coloring}
     */
    this.fullUpdateColoring = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateColoring");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateColoring");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateColoring");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateComment operation.
     * @callback module:api/BcfApi~fullUpdateCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @param {module:api/BcfApi~fullUpdateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    this.fullUpdateComment = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateComment");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateComment");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateCommentEvent operation.
     * @callback module:api/BcfApi~fullUpdateCommentEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~fullUpdateCommentEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.fullUpdateCommentEvent = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateCommentEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateCommentEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateCommentEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateCommentEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateCommentEvent_0 operation.
     * @callback module:api/BcfApi~fullUpdateCommentEvent_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~fullUpdateCommentEvent_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.fullUpdateCommentEvent_0 = function(commentsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling fullUpdateCommentEvent_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateCommentEvent_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateCommentEvent_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateCommentEvent_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateCommentEvent_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateDocumentReference operation.
     * @callback module:api/BcfApi~fullUpdateDocumentReferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @param {module:api/BcfApi~fullUpdateDocumentReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentReference}
     */
    this.fullUpdateDocumentReference = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateDocumentReference");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateDocumentReference");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateDocumentReference");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateDocumentReference");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateFile operation.
     * @callback module:api/BcfApi~fullUpdateFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~fullUpdateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.fullUpdateFile = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateFile");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateFile");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateFile");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateFile");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateRelatedTopic operation.
     * @callback module:api/BcfApi~fullUpdateRelatedTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @param {module:api/BcfApi~fullUpdateRelatedTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedTopic}
     */
    this.fullUpdateRelatedTopic = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRelatedTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateRelatedTopic");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateRelatedTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateRelatedTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateSelection operation.
     * @callback module:api/BcfApi~fullUpdateSelectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Component} data 
     * @param {module:api/BcfApi~fullUpdateSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    this.fullUpdateSelection = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateSelection");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateSelection");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateSelection");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateSnippet operation.
     * @callback module:api/BcfApi~fullUpdateSnippetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~fullUpdateSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.fullUpdateSnippet = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateSnippet");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateSnippet");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateSnippet");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateSnippet");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateTopic operation.
     * @callback module:api/BcfApi~fullUpdateTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @param {module:api/BcfApi~fullUpdateTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    this.fullUpdateTopic = function(id, projectsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateTopicEvent operation.
     * @callback module:api/BcfApi~fullUpdateTopicEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @param {module:api/BcfApi~fullUpdateTopicEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.fullUpdateTopicEvent = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateTopicEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateTopicEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateTopicEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateTopicEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateVersion operation.
     * @callback module:api/BcfApi~fullUpdateVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Version} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/Version} data 
     * @param {module:api/BcfApi~fullUpdateVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Version}
     */
    this.fullUpdateVersion = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateVersion");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateVersion");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Version;

      return this.apiClient.callApi(
        '/bcf/versions/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateViewpoint operation.
     * @callback module:api/BcfApi~fullUpdateViewpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @param {module:api/BcfApi~fullUpdateViewpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    this.fullUpdateViewpoint = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateViewpoint");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateViewpoint");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateViewpoint");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateVisibility operation.
     * @callback module:api/BcfApi~fullUpdateVisibilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visibility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Visibility} data 
     * @param {module:api/BcfApi~fullUpdateVisibilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visibility}
     */
    this.fullUpdateVisibility = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateVisibility");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCommentsEvents operation.
     * @callback module:api/BcfApi~getAllCommentsEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~getAllCommentsEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentEvent>}
     */
    this.getAllCommentsEvents = function(projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getAllCommentsEvents");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommentEvent];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/comments/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTopicsEvents operation.
     * @callback module:api/BcfApi~getAllTopicsEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TopicEvents>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~getAllTopicsEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TopicEvents>}
     */
    this.getAllTopicsEvents = function(projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getAllTopicsEvents");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TopicEvents];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBcfDocument operation.
     * @callback module:api/BcfApi~getBcfDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~getBcfDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getBcfDocument = function(id, projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBcfDocument");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getBcfDocument");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBcfDocuments operation.
     * @callback module:api/BcfApi~getBcfDocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~getBcfDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getBcfDocuments = function(projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getBcfDocuments");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBcfProject operation.
     * @callback module:api/BcfApi~getBcfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/BcfApi~getBcfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    this.getBcfProject = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBcfProjects operation.
     * @callback module:api/BcfApi~getBcfProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BcfProject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/BcfApi~getBcfProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BcfProject>}
     */
    this.getBcfProjects = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BcfProject];

      return this.apiClient.callApi(
        '/bcf/2.1/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBitmap operation.
     * @callback module:api/BcfApi~getBitmapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bitmap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getBitmapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bitmap}
     */
    this.getBitmap = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getBitmap");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBitmap");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getBitmap");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getBitmap");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBitmaps operation.
     * @callback module:api/BcfApi~getBitmapsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Bitmap>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getBitmapsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Bitmap>}
     */
    this.getBitmaps = function(viewpointsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getBitmaps");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getBitmaps");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getBitmaps");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Bitmap];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getColoring operation.
     * @callback module:api/BcfApi~getColoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Coloring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getColoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Coloring}
     */
    this.getColoring = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getColoring");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getColoring");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getColorings operation.
     * @callback module:api/BcfApi~getColoringsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Coloring>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getColoringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Coloring>}
     */
    this.getColorings = function(viewpointsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getColorings");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getColorings");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getColorings");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Coloring];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getComment operation.
     * @callback module:api/BcfApi~getCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    this.getComment = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getComment");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentEvent operation.
     * @callback module:api/BcfApi~getCommentEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getCommentEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.getCommentEvent = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCommentEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getCommentEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getCommentEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentEvent_0 operation.
     * @callback module:api/BcfApi~getCommentEvent_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getCommentEvent_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.getCommentEvent_0 = function(commentsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling getCommentEvent_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCommentEvent_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getCommentEvent_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getCommentEvent_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentEvents operation.
     * @callback module:api/BcfApi~getCommentEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getCommentEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentEvent>}
     */
    this.getCommentEvents = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getCommentEvents");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getCommentEvents");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommentEvent];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentEvents_0 operation.
     * @callback module:api/BcfApi~getCommentEvents_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getCommentEvents_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentEvent>}
     */
    this.getCommentEvents_0 = function(commentsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling getCommentEvents_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getCommentEvents_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getCommentEvents_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommentEvent];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getComments operation.
     * @callback module:api/BcfApi~getCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    this.getComments = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getComments");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getComments");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Comment];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentReference operation.
     * @callback module:api/BcfApi~getDocumentReferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getDocumentReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentReference}
     */
    this.getDocumentReference = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDocumentReference");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getDocumentReference");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getDocumentReference");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentReferences operation.
     * @callback module:api/BcfApi~getDocumentReferencesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DocumentReference>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getDocumentReferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DocumentReference>}
     */
    this.getDocumentReferences = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getDocumentReferences");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getDocumentReferences");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DocumentReference];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtensions operation.
     * @callback module:api/BcfApi~getExtensionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Extensions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~getExtensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Extensions>}
     */
    this.getExtensions = function(projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getExtensions");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Extensions];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extensions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFile operation.
     * @callback module:api/BcfApi~getFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.getFile = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFile");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getFile");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getFile");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFiles operation.
     * @callback module:api/BcfApi~getFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BimSnippet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BimSnippet>}
     */
    this.getFiles = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getFiles");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getFiles");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BimSnippet];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelatedTopic operation.
     * @callback module:api/BcfApi~getRelatedTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getRelatedTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedTopic}
     */
    this.getRelatedTopic = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRelatedTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getRelatedTopic");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getRelatedTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelatedTopics operation.
     * @callback module:api/BcfApi~getRelatedTopicsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RelatedTopic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getRelatedTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RelatedTopic>}
     */
    this.getRelatedTopics = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getRelatedTopics");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getRelatedTopics");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RelatedTopic];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelection operation.
     * @callback module:api/BcfApi~getSelectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    this.getSelection = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getSelection");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSelection");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelections operation.
     * @callback module:api/BcfApi~getSelectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Component>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getSelectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Component>}
     */
    this.getSelections = function(viewpointsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getSelections");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSelections");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSelections");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Component];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnapshots operation.
     * @callback module:api/BcfApi~getSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Snapshot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Snapshot>}
     */
    this.getSnapshots = function(viewpointsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getSnapshots");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSnapshots");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSnapshots");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Snapshot];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/snapshot', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnippet operation.
     * @callback module:api/BcfApi~getSnippetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.getSnippet = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSnippet");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSnippet");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSnippet");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnippets operation.
     * @callback module:api/BcfApi~getSnippetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BimSnippet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getSnippetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BimSnippet>}
     */
    this.getSnippets = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSnippets");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSnippets");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BimSnippet];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopic operation.
     * @callback module:api/BcfApi~getTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~getTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    this.getTopic = function(id, projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopicEvent operation.
     * @callback module:api/BcfApi~getTopicEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getTopicEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.getTopicEvent = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTopicEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopicEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getTopicEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopicEvents operation.
     * @callback module:api/BcfApi~getTopicEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TopicEvents>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getTopicEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TopicEvents>}
     */
    this.getTopicEvents = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopicEvents");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getTopicEvents");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TopicEvents];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopics operation.
     * @callback module:api/BcfApi~getTopicsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Topic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~getTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Topic>}
     */
    this.getTopics = function(projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopics");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Topic];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersion operation.
     * @callback module:api/BcfApi~getVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Version} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/BcfApi~getVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Version}
     */
    this.getVersion = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVersion");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Version;

      return this.apiClient.callApi(
        '/bcf/versions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersions operation.
     * @callback module:api/BcfApi~getVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Version>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/BcfApi~getVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Version>}
     */
    this.getVersions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Version];

      return this.apiClient.callApi(
        '/bcf/versions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getViewpoint operation.
     * @callback module:api/BcfApi~getViewpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getViewpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    this.getViewpoint = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getViewpoint");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getViewpoint");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getViewpoints operation.
     * @callback module:api/BcfApi~getViewpointsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Viewpoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getViewpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Viewpoint>}
     */
    this.getViewpoints = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoints");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getViewpoints");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Viewpoint];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVisibilities operation.
     * @callback module:api/BcfApi~getVisibilitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Visibility>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getVisibilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Visibility>}
     */
    this.getVisibilities = function(viewpointsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getVisibilities");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getVisibilities");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getVisibilities");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Visibility];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVisibility operation.
     * @callback module:api/BcfApi~getVisibilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visibility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~getVisibilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visibility}
     */
    this.getVisibility = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getVisibility");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getVisibility");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBcfDocument operation.
     * @callback module:api/BcfApi~updateBcfDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @param {module:api/BcfApi~updateBcfDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateBcfDocument = function(id, projectsPk, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBcfDocument");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateBcfDocument");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'guid': opts['guid'],
        'filename': opts['filename']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBcfProject operation.
     * @callback module:api/BcfApi~updateBcfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/BcfProject} data 
     * @param {module:api/BcfApi~updateBcfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    this.updateBcfProject = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBcfProject");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBitmap operation.
     * @callback module:api/BcfApi~updateBitmapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bitmap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Bitmap} data 
     * @param {module:api/BcfApi~updateBitmapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bitmap}
     */
    this.updateBitmap = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateBitmap");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBitmap");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateBitmap");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateBitmap");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateBitmap");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateColoring operation.
     * @callback module:api/BcfApi~updateColoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Coloring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Coloring} data 
     * @param {module:api/BcfApi~updateColoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Coloring}
     */
    this.updateColoring = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateColoring");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateColoring");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateColoring");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComment operation.
     * @callback module:api/BcfApi~updateCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @param {module:api/BcfApi~updateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    this.updateComment = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateComment");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateComment");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCommentEvent operation.
     * @callback module:api/BcfApi~updateCommentEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~updateCommentEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.updateCommentEvent = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCommentEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateCommentEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateCommentEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateCommentEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCommentEvent_0 operation.
     * @callback module:api/BcfApi~updateCommentEvent_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~updateCommentEvent_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.updateCommentEvent_0 = function(commentsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling updateCommentEvent_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCommentEvent_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateCommentEvent_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateCommentEvent_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateCommentEvent_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDocumentReference operation.
     * @callback module:api/BcfApi~updateDocumentReferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @param {module:api/BcfApi~updateDocumentReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentReference}
     */
    this.updateDocumentReference = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDocumentReference");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateDocumentReference");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateDocumentReference");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateDocumentReference");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFile operation.
     * @callback module:api/BcfApi~updateFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~updateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.updateFile = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFile");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateFile");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateFile");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateFile");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRelatedTopic operation.
     * @callback module:api/BcfApi~updateRelatedTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @param {module:api/BcfApi~updateRelatedTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedTopic}
     */
    this.updateRelatedTopic = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRelatedTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateRelatedTopic");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateRelatedTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateRelatedTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSelection operation.
     * @callback module:api/BcfApi~updateSelectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Component} data 
     * @param {module:api/BcfApi~updateSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    this.updateSelection = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateSelection");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateSelection");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateSelection");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSnippet operation.
     * @callback module:api/BcfApi~updateSnippetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~updateSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.updateSnippet = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSnippet");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateSnippet");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateSnippet");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateSnippet");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTopic operation.
     * @callback module:api/BcfApi~updateTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @param {module:api/BcfApi~updateTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    this.updateTopic = function(id, projectsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTopicEvent operation.
     * @callback module:api/BcfApi~updateTopicEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @param {module:api/BcfApi~updateTopicEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.updateTopicEvent = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTopicEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateTopicEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateTopicEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateTopicEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVersion operation.
     * @callback module:api/BcfApi~updateVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Version} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/Version} data 
     * @param {module:api/BcfApi~updateVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Version}
     */
    this.updateVersion = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVersion");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateVersion");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Version;

      return this.apiClient.callApi(
        '/bcf/versions/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateViewpoint operation.
     * @callback module:api/BcfApi~updateViewpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @param {module:api/BcfApi~updateViewpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    this.updateViewpoint = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateViewpoint");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateViewpoint");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateViewpoint");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVisibility operation.
     * @callback module:api/BcfApi~updateVisibilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visibility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Visibility} data 
     * @param {module:api/BcfApi~updateVisibilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visibility}
     */
    this.updateVisibility = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateVisibility");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateVisibility");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateVisibility");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
