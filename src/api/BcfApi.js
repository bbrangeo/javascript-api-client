/**
 * BIMData API
 * BIMData API documentation
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BcfProject', 'model/BimSnippet', 'model/Bitmap', 'model/Coloring', 'model/Comment', 'model/CommentEvent', 'model/Component', 'model/DocumentReference', 'model/Extensions', 'model/RelatedTopic', 'model/SelfUser', 'model/Snapshot', 'model/Topic', 'model/TopicEvents', 'model/Version', 'model/Viewpoint', 'model/Visibility'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BcfProject'), require('../model/BimSnippet'), require('../model/Bitmap'), require('../model/Coloring'), require('../model/Comment'), require('../model/CommentEvent'), require('../model/Component'), require('../model/DocumentReference'), require('../model/Extensions'), require('../model/RelatedTopic'), require('../model/SelfUser'), require('../model/Snapshot'), require('../model/Topic'), require('../model/TopicEvents'), require('../model/Version'), require('../model/Viewpoint'), require('../model/Visibility'));
  } else {
    // Browser globals (root is window)
    if (!root.bimdata) {
      root.bimdata = {};
    }
    root.bimdata.BcfApi = factory(root.bimdata.ApiClient, root.bimdata.BcfProject, root.bimdata.BimSnippet, root.bimdata.Bitmap, root.bimdata.Coloring, root.bimdata.Comment, root.bimdata.CommentEvent, root.bimdata.Component, root.bimdata.DocumentReference, root.bimdata.Extensions, root.bimdata.RelatedTopic, root.bimdata.SelfUser, root.bimdata.Snapshot, root.bimdata.Topic, root.bimdata.TopicEvents, root.bimdata.Version, root.bimdata.Viewpoint, root.bimdata.Visibility);
  }
}(this, function(ApiClient, BcfProject, BimSnippet, Bitmap, Coloring, Comment, CommentEvent, Component, DocumentReference, Extensions, RelatedTopic, SelfUser, Snapshot, Topic, TopicEvents, Version, Viewpoint, Visibility) {
  'use strict';

  /**
   * Bcf service.
   * @module api/BcfApi
   * @version 1.0.1
   */

  /**
   * Constructs a new BcfApi. 
   * @alias module:api/BcfApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the bcf21CurrentUserList operation.
     * @callback module:api/BcfApi~bcf21CurrentUserListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SelfUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/BcfApi~bcf21CurrentUserListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SelfUser>}
     */
    this.bcf21CurrentUserList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SelfUser];

      return this.apiClient.callApi(
        '/bcf/2.1/current-user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/BcfProject} data 
     * @param {module:api/BcfApi~bcf21ProjectsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    this.bcf21ProjectsCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/BcfApi~bcf21ProjectsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsDocumentsCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsDocumentsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @param {module:api/BcfApi~bcf21ProjectsDocumentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsDocumentsCreate = function(projectsPk, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsDocumentsCreate");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'guid': opts['guid'],
        'filename': opts['filename']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsDocumentsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsDocumentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsDocumentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsDocumentsDelete = function(id, projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsDocumentsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsDocumentsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsDocumentsList operation.
     * @callback module:api/BcfApi~bcf21ProjectsDocumentsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsDocumentsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsDocumentsList = function(projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsDocumentsList");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsDocumentsPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsDocumentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @param {module:api/BcfApi~bcf21ProjectsDocumentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsDocumentsPartialUpdate = function(id, projectsPk, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsDocumentsPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsDocumentsPartialUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'guid': opts['guid'],
        'filename': opts['filename']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsDocumentsRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsDocumentsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsDocumentsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsDocumentsRead = function(id, projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsDocumentsRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsDocumentsRead");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsDocumentsUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsDocumentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @param {module:api/BcfApi~bcf21ProjectsDocumentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsDocumentsUpdate = function(id, projectsPk, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsDocumentsUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsDocumentsUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'guid': opts['guid'],
        'filename': opts['filename']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsExtensionsList operation.
     * @callback module:api/BcfApi~bcf21ProjectsExtensionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Extensions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsExtensionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Extensions>}
     */
    this.bcf21ProjectsExtensionsList = function(projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsExtensionsList");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Extensions];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extensions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsList operation.
     * @callback module:api/BcfApi~bcf21ProjectsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BcfProject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/BcfApi~bcf21ProjectsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BcfProject>}
     */
    this.bcf21ProjectsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BcfProject];

      return this.apiClient.callApi(
        '/bcf/2.1/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/BcfProject} data 
     * @param {module:api/BcfApi~bcf21ProjectsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    this.bcf21ProjectsPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/BcfApi~bcf21ProjectsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    this.bcf21ProjectsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    this.bcf21ProjectsTopicsCommentsCreate = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsCommentsCreate");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsCommentsDelete = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.bcf21ProjectsTopicsCommentsEventsCreate = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsCommentsEventsCreate");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsCreate_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsCreate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsCreate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.bcf21ProjectsTopicsCommentsEventsCreate_0 = function(commentsPk, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling bcf21ProjectsTopicsCommentsEventsCreate_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsCreate_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsCreate_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsCommentsEventsCreate_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsCommentsEventsDelete = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsDelete_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsCommentsEventsDelete_0 = function(commentsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentEvent>}
     */
    this.bcf21ProjectsTopicsCommentsEventsList = function(projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsList");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommentEvent];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/comments/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsList_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsList_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentEvent>}
     */
    this.bcf21ProjectsTopicsCommentsEventsList_0 = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsList_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsList_0");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommentEvent];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsList_1 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsList_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsList_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentEvent>}
     */
    this.bcf21ProjectsTopicsCommentsEventsList_1 = function(commentsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling bcf21ProjectsTopicsCommentsEventsList_1");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsList_1");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsList_1");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommentEvent];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.bcf21ProjectsTopicsCommentsEventsPartialUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsPartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsCommentsEventsPartialUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsPartialUpdate_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsPartialUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsPartialUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.bcf21ProjectsTopicsCommentsEventsPartialUpdate_0 = function(commentsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling bcf21ProjectsTopicsCommentsEventsPartialUpdate_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsPartialUpdate_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsPartialUpdate_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsPartialUpdate_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsCommentsEventsPartialUpdate_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.bcf21ProjectsTopicsCommentsEventsRead = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsRead");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsRead_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsRead_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsRead_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.bcf21ProjectsTopicsCommentsEventsRead_0 = function(commentsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling bcf21ProjectsTopicsCommentsEventsRead_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsRead_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsRead_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsRead_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.bcf21ProjectsTopicsCommentsEventsUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsCommentsEventsUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsEventsUpdate_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsEventsUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentEvent}
     */
    this.bcf21ProjectsTopicsCommentsEventsUpdate_0 = function(commentsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling bcf21ProjectsTopicsCommentsEventsUpdate_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsUpdate_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsUpdate_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsUpdate_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsCommentsEventsUpdate_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    this.bcf21ProjectsTopicsCommentsList = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsList");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Comment];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    this.bcf21ProjectsTopicsCommentsPartialUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsPartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsCommentsPartialUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    this.bcf21ProjectsTopicsCommentsRead = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsRead");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCommentsUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCommentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCommentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    this.bcf21ProjectsTopicsCommentsUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsCommentsUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    this.bcf21ProjectsTopicsCreate = function(projectsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsCreate");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsDelete = function(id, projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsDocumentReferencesCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentReference}
     */
    this.bcf21ProjectsTopicsDocumentReferencesCreate = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsDocumentReferencesCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsDocumentReferencesCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsDocumentReferencesCreate");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsDocumentReferencesDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsDocumentReferencesDelete = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsDocumentReferencesDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsDocumentReferencesDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsDocumentReferencesDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsDocumentReferencesList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DocumentReference>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DocumentReference>}
     */
    this.bcf21ProjectsTopicsDocumentReferencesList = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsDocumentReferencesList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsDocumentReferencesList");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DocumentReference];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsDocumentReferencesPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentReference}
     */
    this.bcf21ProjectsTopicsDocumentReferencesPartialUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsDocumentReferencesPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsDocumentReferencesPartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsDocumentReferencesPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsDocumentReferencesPartialUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsDocumentReferencesRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentReference}
     */
    this.bcf21ProjectsTopicsDocumentReferencesRead = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsDocumentReferencesRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsDocumentReferencesRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsDocumentReferencesRead");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsDocumentReferencesUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsDocumentReferencesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentReference}
     */
    this.bcf21ProjectsTopicsDocumentReferencesUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsDocumentReferencesUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsDocumentReferencesUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsDocumentReferencesUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsDocumentReferencesUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:model/TopicEvents} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.bcf21ProjectsTopicsEventsCreate = function(projectsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsEventsCreate");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsCreate_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsCreate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsCreate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.bcf21ProjectsTopicsEventsCreate_0 = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsCreate_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsEventsCreate_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsEventsCreate_0");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsEventsDelete = function(id, projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsEventsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/events/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsDelete_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsEventsDelete_0 = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsEventsDelete_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsDelete_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsEventsDelete_0");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TopicEvents>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TopicEvents>}
     */
    this.bcf21ProjectsTopicsEventsList = function(projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsList");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TopicEvents];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsList_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsList_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TopicEvents>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TopicEvents>}
     */
    this.bcf21ProjectsTopicsEventsList_0 = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsList_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsEventsList_0");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TopicEvents];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:model/TopicEvents} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.bcf21ProjectsTopicsEventsPartialUpdate = function(id, projectsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsEventsPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsEventsPartialUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/events/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsPartialUpdate_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsPartialUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsPartialUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.bcf21ProjectsTopicsEventsPartialUpdate_0 = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsEventsPartialUpdate_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsPartialUpdate_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsEventsPartialUpdate_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsEventsPartialUpdate_0");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.bcf21ProjectsTopicsEventsRead = function(id, projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsEventsRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsRead");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsRead_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsRead_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsRead_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.bcf21ProjectsTopicsEventsRead_0 = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsEventsRead_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsRead_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsEventsRead_0");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:model/TopicEvents} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.bcf21ProjectsTopicsEventsUpdate = function(id, projectsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsEventsUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsEventsUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/events/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsEventsUpdate_0 operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsEventsUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicEvents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsEventsUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicEvents}
     */
    this.bcf21ProjectsTopicsEventsUpdate_0 = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsEventsUpdate_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsUpdate_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsEventsUpdate_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsEventsUpdate_0");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsFileCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsFileCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsFileCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.bcf21ProjectsTopicsFileCreate = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsFileCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsFileCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsFileCreate");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsFileDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsFileDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsFileDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsFileDelete = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsFileDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsFileDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsFileDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsFileList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsFileListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BimSnippet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsFileListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BimSnippet>}
     */
    this.bcf21ProjectsTopicsFileList = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsFileList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsFileList");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BimSnippet];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsFilePartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsFilePartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsFilePartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.bcf21ProjectsTopicsFilePartialUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsFilePartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsFilePartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsFilePartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsFilePartialUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsFileRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsFileReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsFileReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.bcf21ProjectsTopicsFileRead = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsFileRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsFileRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsFileRead");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsFileUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsFileUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsFileUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.bcf21ProjectsTopicsFileUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsFileUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsFileUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsFileUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsFileUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Topic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Topic>}
     */
    this.bcf21ProjectsTopicsList = function(projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsList");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Topic];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    this.bcf21ProjectsTopicsPartialUpdate = function(id, projectsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsPartialUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    this.bcf21ProjectsTopicsRead = function(id, projectsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsRead");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsRelatedTopicsCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedTopic}
     */
    this.bcf21ProjectsTopicsRelatedTopicsCreate = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsRelatedTopicsCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsRelatedTopicsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsRelatedTopicsCreate");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsRelatedTopicsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsRelatedTopicsDelete = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsRelatedTopicsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsRelatedTopicsDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsRelatedTopicsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsRelatedTopicsList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RelatedTopic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RelatedTopic>}
     */
    this.bcf21ProjectsTopicsRelatedTopicsList = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsRelatedTopicsList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsRelatedTopicsList");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RelatedTopic];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsRelatedTopicsPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedTopic}
     */
    this.bcf21ProjectsTopicsRelatedTopicsPartialUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsRelatedTopicsPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsRelatedTopicsPartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsRelatedTopicsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsRelatedTopicsPartialUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsRelatedTopicsRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedTopic}
     */
    this.bcf21ProjectsTopicsRelatedTopicsRead = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsRelatedTopicsRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsRelatedTopicsRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsRelatedTopicsRead");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsRelatedTopicsUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsRelatedTopicsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedTopic}
     */
    this.bcf21ProjectsTopicsRelatedTopicsUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsRelatedTopicsUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsRelatedTopicsUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsRelatedTopicsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsRelatedTopicsUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsSnippetCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsSnippetCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsSnippetCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.bcf21ProjectsTopicsSnippetCreate = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsSnippetCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsSnippetCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsSnippetCreate");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsSnippetDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsSnippetDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsSnippetDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsSnippetDelete = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsSnippetDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsSnippetDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsSnippetDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsSnippetList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsSnippetListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BimSnippet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsSnippetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BimSnippet>}
     */
    this.bcf21ProjectsTopicsSnippetList = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsSnippetList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsSnippetList");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BimSnippet];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsSnippetPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsSnippetPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsSnippetPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.bcf21ProjectsTopicsSnippetPartialUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsSnippetPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsSnippetPartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsSnippetPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsSnippetPartialUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsSnippetRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsSnippetReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsSnippetReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.bcf21ProjectsTopicsSnippetRead = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsSnippetRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsSnippetRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsSnippetRead");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsSnippetUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsSnippetUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BimSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsSnippetUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BimSnippet}
     */
    this.bcf21ProjectsTopicsSnippetUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsSnippetUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsSnippetUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsSnippetUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsSnippetUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    this.bcf21ProjectsTopicsUpdate = function(id, projectsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsBitmapCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bitmap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Bitmap} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bitmap}
     */
    this.bcf21ProjectsTopicsViewpointsBitmapCreate = function(viewpointsPk, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsBitmapCreate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsBitmapCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsBitmapCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsBitmapCreate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsBitmapDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsViewpointsBitmapDelete = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsBitmapList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Bitmap>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Bitmap>}
     */
    this.bcf21ProjectsTopicsViewpointsBitmapList = function(viewpointsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsBitmapList");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsBitmapList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsBitmapList");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Bitmap];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsBitmapPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bitmap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Bitmap} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bitmap}
     */
    this.bcf21ProjectsTopicsViewpointsBitmapPartialUpdate = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsBitmapPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsBitmapPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsBitmapPartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsBitmapPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsBitmapPartialUpdate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsBitmapRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bitmap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bitmap}
     */
    this.bcf21ProjectsTopicsViewpointsBitmapRead = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsBitmapRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsBitmapRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsBitmapRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsBitmapRead");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsBitmapUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bitmap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Bitmap} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsBitmapUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bitmap}
     */
    this.bcf21ProjectsTopicsViewpointsBitmapUpdate = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsBitmapUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsBitmapUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsBitmapUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsBitmapUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsBitmapUpdate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsColoringCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Coloring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Coloring} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Coloring}
     */
    this.bcf21ProjectsTopicsViewpointsColoringCreate = function(viewpointsPk, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsColoringCreate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsColoringCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsColoringCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsColoringCreate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsColoringDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsViewpointsColoringDelete = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsColoringList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Coloring>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Coloring>}
     */
    this.bcf21ProjectsTopicsViewpointsColoringList = function(viewpointsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsColoringList");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsColoringList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsColoringList");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Coloring];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsColoringPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Coloring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Coloring} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Coloring}
     */
    this.bcf21ProjectsTopicsViewpointsColoringPartialUpdate = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsColoringPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsColoringPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsColoringPartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsColoringPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsColoringPartialUpdate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsColoringRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Coloring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Coloring}
     */
    this.bcf21ProjectsTopicsViewpointsColoringRead = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsColoringRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsColoringRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsColoringRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsColoringRead");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsColoringUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Coloring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Coloring} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsColoringUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Coloring}
     */
    this.bcf21ProjectsTopicsViewpointsColoringUpdate = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsColoringUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsColoringUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsColoringUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsColoringUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsColoringUpdate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    this.bcf21ProjectsTopicsViewpointsCreate = function(projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsCreate");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsViewpointsDelete = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Viewpoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Viewpoint>}
     */
    this.bcf21ProjectsTopicsViewpointsList = function(projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsList");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Viewpoint];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    this.bcf21ProjectsTopicsViewpointsPartialUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsPartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsPartialUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    this.bcf21ProjectsTopicsViewpointsRead = function(id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsRead");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsSelectionCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Component} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    this.bcf21ProjectsTopicsViewpointsSelectionCreate = function(viewpointsPk, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsSelectionCreate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsSelectionCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsSelectionCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsSelectionCreate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsSelectionDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsViewpointsSelectionDelete = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsSelectionList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Component>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Component>}
     */
    this.bcf21ProjectsTopicsViewpointsSelectionList = function(viewpointsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsSelectionList");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsSelectionList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsSelectionList");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Component];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsSelectionPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Component} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    this.bcf21ProjectsTopicsViewpointsSelectionPartialUpdate = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsSelectionPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsSelectionPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsSelectionPartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsSelectionPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsSelectionPartialUpdate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsSelectionRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    this.bcf21ProjectsTopicsViewpointsSelectionRead = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsSelectionRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsSelectionRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsSelectionRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsSelectionRead");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsSelectionUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Component} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsSelectionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    this.bcf21ProjectsTopicsViewpointsSelectionUpdate = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsSelectionUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsSelectionUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsSelectionUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsSelectionUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsSelectionUpdate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsSnapshotList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsSnapshotListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Snapshot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsSnapshotListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Snapshot>}
     */
    this.bcf21ProjectsTopicsViewpointsSnapshotList = function(viewpointsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsSnapshotList");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsSnapshotList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsSnapshotList");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Snapshot];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/snapshot', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    this.bcf21ProjectsTopicsViewpointsUpdate = function(id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsUpdate");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsVisibilityCreate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visibility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Visibility} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visibility}
     */
    this.bcf21ProjectsTopicsViewpointsVisibilityCreate = function(viewpointsPk, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityCreate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityCreate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsVisibilityCreate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsVisibilityDelete operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcf21ProjectsTopicsViewpointsVisibilityDelete = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsVisibilityList operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Visibility>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Visibility>}
     */
    this.bcf21ProjectsTopicsViewpointsVisibilityList = function(viewpointsPk, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityList");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityList");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityList");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Visibility];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsVisibilityPartialUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visibility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Visibility} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visibility}
     */
    this.bcf21ProjectsTopicsViewpointsVisibilityPartialUpdate = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsVisibilityPartialUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityPartialUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsVisibilityPartialUpdate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsVisibilityRead operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visibility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visibility}
     */
    this.bcf21ProjectsTopicsViewpointsVisibilityRead = function(viewpointsPk, id, projectsPk, topicsPk, callback) {
      var postBody = null;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsVisibilityRead");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityRead");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityRead");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsTopicsViewpointsVisibilityUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visibility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} viewpointsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Visibility} data 
     * @param {module:api/BcfApi~bcf21ProjectsTopicsViewpointsVisibilityUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visibility}
     */
    this.bcf21ProjectsTopicsViewpointsVisibilityUpdate = function(viewpointsPk, id, projectsPk, topicsPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsVisibilityUpdate");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityUpdate");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsTopicsViewpointsVisibilityUpdate");
      }


      var pathParams = {
        'viewpoints_pk': viewpointsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcf21ProjectsUpdate operation.
     * @callback module:api/BcfApi~bcf21ProjectsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/BcfProject} data 
     * @param {module:api/BcfApi~bcf21ProjectsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    this.bcf21ProjectsUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcf21ProjectsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionsCreate operation.
     * @callback module:api/BcfApi~bcfVersionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Version} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Version} data 
     * @param {module:api/BcfApi~bcfVersionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Version}
     */
    this.bcfVersionsCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcfVersionsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Version;

      return this.apiClient.callApi(
        '/bcf/versions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionsDelete operation.
     * @callback module:api/BcfApi~bcfVersionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/BcfApi~bcfVersionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bcfVersionsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcfVersionsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/versions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionsList operation.
     * @callback module:api/BcfApi~bcfVersionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Version>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/BcfApi~bcfVersionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Version>}
     */
    this.bcfVersionsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Version];

      return this.apiClient.callApi(
        '/bcf/versions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionsPartialUpdate operation.
     * @callback module:api/BcfApi~bcfVersionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Version} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/Version} data 
     * @param {module:api/BcfApi~bcfVersionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Version}
     */
    this.bcfVersionsPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcfVersionsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcfVersionsPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Version;

      return this.apiClient.callApi(
        '/bcf/versions/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionsRead operation.
     * @callback module:api/BcfApi~bcfVersionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Version} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/BcfApi~bcfVersionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Version}
     */
    this.bcfVersionsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcfVersionsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Version;

      return this.apiClient.callApi(
        '/bcf/versions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionsUpdate operation.
     * @callback module:api/BcfApi~bcfVersionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Version} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/Version} data 
     * @param {module:api/BcfApi~bcfVersionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Version}
     */
    this.bcfVersionsUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcfVersionsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bcfVersionsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Version;

      return this.apiClient.callApi(
        '/bcf/versions/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
