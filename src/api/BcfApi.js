/**
 * BIMData API
 * BIMData API documentation
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BcfProject', 'model/Coloring', 'model/Comment', 'model/Component', 'model/Extensions', 'model/SelfBcfUser', 'model/SingleJsonTopic', 'model/Topic', 'model/Viewpoint', 'model/Visibility'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BcfProject'), require('../model/Coloring'), require('../model/Comment'), require('../model/Component'), require('../model/Extensions'), require('../model/SelfBcfUser'), require('../model/SingleJsonTopic'), require('../model/Topic'), require('../model/Viewpoint'), require('../model/Visibility'));
  } else {
    // Browser globals (root is window)
    if (!root.bimdata) {
      root.bimdata = {};
    }
    root.bimdata.BcfApi = factory(root.bimdata.ApiClient, root.bimdata.BcfProject, root.bimdata.Coloring, root.bimdata.Comment, root.bimdata.Component, root.bimdata.Extensions, root.bimdata.SelfBcfUser, root.bimdata.SingleJsonTopic, root.bimdata.Topic, root.bimdata.Viewpoint, root.bimdata.Visibility);
  }
}(this, function(ApiClient, BcfProject, Coloring, Comment, Component, Extensions, SelfBcfUser, SingleJsonTopic, Topic, Viewpoint, Visibility) {
  'use strict';

  /**
   * Bcf service.
   * @module api/BcfApi
   * @version 0.0.0
   */

  /**
   * Constructs a new BcfApi. 
   * @alias module:api/BcfApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} coloring 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coloring} and HTTP response
     */
    this.createColoringWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk, coloring) {
      var postBody = coloring;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createColoring");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createColoring");
      }

      // verify the required parameter 'coloring' is set
      if (coloring === undefined || coloring === null) {
        throw new Error("Missing the required parameter 'coloring' when calling createColoring");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} coloring 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coloring}
     */
    this.createColoring = function(projectsPk, topicsPk, viewpointsPk, coloring) {
      return this.createColoringWithHttpInfo(projectsPk, topicsPk, viewpointsPk, coloring)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} comment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    this.createCommentWithHttpInfo = function(projectsPk, topicsPk, comment) {
      var postBody = comment;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling createComment");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} comment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    this.createComment = function(projectsPk, topicsPk, comment) {
      return this.createCommentWithHttpInfo(projectsPk, topicsPk, comment)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {module:model/SingleJsonTopic} singleJsonTopic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SingleJsonTopic} and HTTP response
     */
    this.createFullTopicWithHttpInfo = function(projectsPk, singleJsonTopic) {
      var postBody = singleJsonTopic;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createFullTopic");
      }

      // verify the required parameter 'singleJsonTopic' is set
      if (singleJsonTopic === undefined || singleJsonTopic === null) {
        throw new Error("Missing the required parameter 'singleJsonTopic' when calling createFullTopic");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleJsonTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {module:model/SingleJsonTopic} singleJsonTopic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SingleJsonTopic}
     */
    this.createFullTopic = function(projectsPk, singleJsonTopic) {
      return this.createFullTopicWithHttpInfo(projectsPk, singleJsonTopic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} component 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Component} and HTTP response
     */
    this.createSelectionWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk, component) {
      var postBody = component;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createSelection");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createSelection");
      }

      // verify the required parameter 'component' is set
      if (component === undefined || component === null) {
        throw new Error("Missing the required parameter 'component' when calling createSelection");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} component 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Component}
     */
    this.createSelection = function(projectsPk, topicsPk, viewpointsPk, component) {
      return this.createSelectionWithHttpInfo(projectsPk, topicsPk, viewpointsPk, component)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {module:model/Topic} topic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    this.createTopicWithHttpInfo = function(projectsPk, topic) {
      var postBody = topic;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createTopic");
      }

      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling createTopic");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {module:model/Topic} topic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    this.createTopic = function(projectsPk, topic) {
      return this.createTopicWithHttpInfo(projectsPk, topic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} viewpoint 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    this.createViewpointWithHttpInfo = function(projectsPk, topicsPk, viewpoint) {
      var postBody = viewpoint;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createViewpoint");
      }

      // verify the required parameter 'viewpoint' is set
      if (viewpoint === undefined || viewpoint === null) {
        throw new Error("Missing the required parameter 'viewpoint' when calling createViewpoint");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} viewpoint 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    this.createViewpoint = function(projectsPk, topicsPk, viewpoint) {
      return this.createViewpointWithHttpInfo(projectsPk, topicsPk, viewpoint)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} visibility 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visibility} and HTTP response
     */
    this.createVisibilityWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk, visibility) {
      var postBody = visibility;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createVisibility");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createVisibility");
      }

      // verify the required parameter 'visibility' is set
      if (visibility === undefined || visibility === null) {
        throw new Error("Missing the required parameter 'visibility' when calling createVisibility");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} visibility 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visibility}
     */
    this.createVisibility = function(projectsPk, topicsPk, viewpointsPk, visibility) {
      return this.createVisibilityWithHttpInfo(projectsPk, topicsPk, viewpointsPk, visibility)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this coloring.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteColoringWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteColoring");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling deleteColoring");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this coloring.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteColoring = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.deleteColoringWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this comment.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCommentWithHttpInfo = function(guid, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deleteComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteComment");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{guid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this comment.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteComment = function(guid, projectsPk, topicsPk) {
      return this.deleteCommentWithHttpInfo(guid, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this component.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSelectionWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteSelection");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling deleteSelection");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this component.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSelection = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.deleteSelectionWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteTopicWithHttpInfo = function(guid, projectsPk) {
      var postBody = null;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deleteTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteTopic");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteTopic = function(guid, projectsPk) {
      return this.deleteTopicWithHttpInfo(guid, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this viewpoint.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteViewpointWithHttpInfo = function(guid, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deleteViewpoint");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteViewpoint");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{guid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this viewpoint.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteViewpoint = function(guid, projectsPk, topicsPk) {
      return this.deleteViewpointWithHttpInfo(guid, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this visibility.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteVisibilityWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteVisibility");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling deleteVisibility");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this visibility.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteVisibility = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.deleteVisibilityWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     *          export project&#39;s topics in bcf-xml format         
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.downloadBcfExportWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadBcfExport");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     *          export project&#39;s topics in bcf-xml format         
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.downloadBcfExport = function(id) {
      return this.downloadBcfExportWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:model/BcfProject} bcfProject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfProject} and HTTP response
     */
    this.fullUpdateBcfProjectWithHttpInfo = function(id, bcfProject) {
      var postBody = bcfProject;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateBcfProject");
      }

      // verify the required parameter 'bcfProject' is set
      if (bcfProject === undefined || bcfProject === null) {
        throw new Error("Missing the required parameter 'bcfProject' when calling fullUpdateBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:model/BcfProject} bcfProject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfProject}
     */
    this.fullUpdateBcfProject = function(id, bcfProject) {
      return this.fullUpdateBcfProjectWithHttpInfo(id, bcfProject)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this coloring.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} coloring 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coloring} and HTTP response
     */
    this.fullUpdateColoringWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, coloring) {
      var postBody = coloring;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateColoring");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateColoring");
      }

      // verify the required parameter 'coloring' is set
      if (coloring === undefined || coloring === null) {
        throw new Error("Missing the required parameter 'coloring' when calling fullUpdateColoring");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this coloring.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} coloring 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coloring}
     */
    this.fullUpdateColoring = function(id, projectsPk, topicsPk, viewpointsPk, coloring) {
      return this.fullUpdateColoringWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, coloring)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this comment.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} comment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    this.fullUpdateCommentWithHttpInfo = function(guid, projectsPk, topicsPk, comment) {
      var postBody = comment;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling fullUpdateComment");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{guid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this comment.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} comment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    this.fullUpdateComment = function(guid, projectsPk, topicsPk, comment) {
      return this.fullUpdateCommentWithHttpInfo(guid, projectsPk, topicsPk, comment)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @param {module:model/SingleJsonTopic} singleJsonTopic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SingleJsonTopic} and HTTP response
     */
    this.fullUpdateFullTopicWithHttpInfo = function(guid, projectsPk, singleJsonTopic) {
      var postBody = singleJsonTopic;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateFullTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateFullTopic");
      }

      // verify the required parameter 'singleJsonTopic' is set
      if (singleJsonTopic === undefined || singleJsonTopic === null) {
        throw new Error("Missing the required parameter 'singleJsonTopic' when calling fullUpdateFullTopic");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleJsonTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @param {module:model/SingleJsonTopic} singleJsonTopic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SingleJsonTopic}
     */
    this.fullUpdateFullTopic = function(guid, projectsPk, singleJsonTopic) {
      return this.fullUpdateFullTopicWithHttpInfo(guid, projectsPk, singleJsonTopic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this component.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} component 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Component} and HTTP response
     */
    this.fullUpdateSelectionWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, component) {
      var postBody = component;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateSelection");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateSelection");
      }

      // verify the required parameter 'component' is set
      if (component === undefined || component === null) {
        throw new Error("Missing the required parameter 'component' when calling fullUpdateSelection");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this component.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} component 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Component}
     */
    this.fullUpdateSelection = function(id, projectsPk, topicsPk, viewpointsPk, component) {
      return this.fullUpdateSelectionWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, component)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @param {module:model/Topic} topic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    this.fullUpdateTopicWithHttpInfo = function(guid, projectsPk, topic) {
      var postBody = topic;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateTopic");
      }

      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling fullUpdateTopic");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @param {module:model/Topic} topic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    this.fullUpdateTopic = function(guid, projectsPk, topic) {
      return this.fullUpdateTopicWithHttpInfo(guid, projectsPk, topic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this viewpoint.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} viewpoint 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    this.fullUpdateViewpointWithHttpInfo = function(guid, projectsPk, topicsPk, viewpoint) {
      var postBody = viewpoint;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateViewpoint");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateViewpoint");
      }

      // verify the required parameter 'viewpoint' is set
      if (viewpoint === undefined || viewpoint === null) {
        throw new Error("Missing the required parameter 'viewpoint' when calling fullUpdateViewpoint");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{guid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this viewpoint.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} viewpoint 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    this.fullUpdateViewpoint = function(guid, projectsPk, topicsPk, viewpoint) {
      return this.fullUpdateViewpointWithHttpInfo(guid, projectsPk, topicsPk, viewpoint)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this visibility.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} visibility 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visibility} and HTTP response
     */
    this.fullUpdateVisibilityWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, visibility) {
      var postBody = visibility;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'visibility' is set
      if (visibility === undefined || visibility === null) {
        throw new Error("Missing the required parameter 'visibility' when calling fullUpdateVisibility");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this visibility.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} visibility 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visibility}
     */
    this.fullUpdateVisibility = function(id, projectsPk, topicsPk, viewpointsPk, visibility) {
      return this.fullUpdateVisibilityWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, visibility)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfProject} and HTTP response
     */
    this.getBcfProjectWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfProject}
     */
    this.getBcfProject = function(id) {
      return this.getBcfProjectWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BcfProject>} and HTTP response
     */
    this.getBcfProjectsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [BcfProject];

      return this.apiClient.callApi(
        '/bcf/2.1/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BcfProject>}
     */
    this.getBcfProjects = function() {
      return this.getBcfProjectsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this coloring.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coloring} and HTTP response
     */
    this.getColoringWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getColoring");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getColoring");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this coloring.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coloring}
     */
    this.getColoring = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.getColoringWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Coloring>} and HTTP response
     */
    this.getColoringsWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getColorings");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getColorings");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getColorings");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Coloring];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Coloring>}
     */
    this.getColorings = function(projectsPk, topicsPk, viewpointsPk) {
      return this.getColoringsWithHttpInfo(projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this comment.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    this.getCommentWithHttpInfo = function(guid, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getComment");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{guid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this comment.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    this.getComment = function(guid, projectsPk, topicsPk) {
      return this.getCommentWithHttpInfo(guid, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Comment>} and HTTP response
     */
    this.getCommentsWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getComments");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getComments");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Comment];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Comment>}
     */
    this.getComments = function(projectsPk, topicsPk) {
      return this.getCommentsWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Extensions} and HTTP response
     */
    this.getExtensionsWithHttpInfo = function(projectsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getExtensions");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Extensions;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extensions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Extensions}
     */
    this.getExtensions = function(projectsPk) {
      return this.getExtensionsWithHttpInfo(projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SingleJsonTopic} and HTTP response
     */
    this.getFullTopicWithHttpInfo = function(guid, projectsPk) {
      var postBody = null;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getFullTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getFullTopic");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SingleJsonTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SingleJsonTopic}
     */
    this.getFullTopic = function(guid, projectsPk) {
      return this.getFullTopicWithHttpInfo(guid, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifcs Filter the returned list by ifcs
     * @param {String} opts.format Filter the returned list by format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SingleJsonTopic>} and HTTP response
     */
    this.getFullTopicsWithHttpInfo = function(projectsPk, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getFullTopics");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
        'ifcs': opts['ifcs'],
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SingleJsonTopic];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifcs Filter the returned list by ifcs
     * @param {String} opts.format Filter the returned list by format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SingleJsonTopic>}
     */
    this.getFullTopics = function(projectsPk, opts) {
      return this.getFullTopicsWithHttpInfo(projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this component.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Component} and HTTP response
     */
    this.getSelectionWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSelection");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getSelection");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this component.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Component}
     */
    this.getSelection = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.getSelectionWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Component>} and HTTP response
     */
    this.getSelectionsWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSelections");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSelections");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getSelections");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Component];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Component>}
     */
    this.getSelections = function(projectsPk, topicsPk, viewpointsPk) {
      return this.getSelectionsWithHttpInfo(projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the viewpoint&#39; snapshot
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    this.getSnapshotWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSnapshot");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSnapshot");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getSnapshot");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/snapshot', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve the viewpoint&#39; snapshot
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    this.getSnapshot = function(projectsPk, topicsPk, viewpointsPk) {
      return this.getSnapshotWithHttpInfo(projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    this.getTopicWithHttpInfo = function(guid, projectsPk) {
      var postBody = null;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopic");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    this.getTopic = function(guid, projectsPk) {
      return this.getTopicWithHttpInfo(guid, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Viewpoint>} and HTTP response
     */
    this.getTopicViewpointsWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopicViewpoints");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getTopicViewpoints");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Viewpoint];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/topic-viewpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Viewpoint>}
     */
    this.getTopicViewpoints = function(projectsPk, topicsPk) {
      return this.getTopicViewpointsWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifcs Filter the returned list by ifcs
     * @param {String} opts.format Filter the returned list by format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Topic>} and HTTP response
     */
    this.getTopicsWithHttpInfo = function(projectsPk, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopics");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
        'ifcs': opts['ifcs'],
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Topic];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifcs Filter the returned list by ifcs
     * @param {String} opts.format Filter the returned list by format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Topic>}
     */
    this.getTopics = function(projectsPk, opts) {
      return this.getTopicsWithHttpInfo(projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SelfBcfUser} and HTTP response
     */
    this.getUserWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SelfBcfUser;

      return this.apiClient.callApi(
        '/bcf/2.1/current-user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SelfBcfUser}
     */
    this.getUser = function() {
      return this.getUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this viewpoint.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    this.getViewpointWithHttpInfo = function(guid, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getViewpoint");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getViewpoint");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{guid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this viewpoint.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    this.getViewpoint = function(guid, projectsPk, topicsPk) {
      return this.getViewpointWithHttpInfo(guid, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Viewpoint>} and HTTP response
     */
    this.getViewpointsWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoints");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getViewpoints");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Viewpoint];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Viewpoint>}
     */
    this.getViewpoints = function(projectsPk, topicsPk) {
      return this.getViewpointsWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Visibility>} and HTTP response
     */
    this.getVisibilitiesWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getVisibilities");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getVisibilities");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getVisibilities");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Visibility];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Visibility>}
     */
    this.getVisibilities = function(projectsPk, topicsPk, viewpointsPk) {
      return this.getVisibilitiesWithHttpInfo(projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this visibility.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visibility} and HTTP response
     */
    this.getVisibilityWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getVisibility");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getVisibility");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this visibility.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visibility}
     */
    this.getVisibility = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.getVisibilityWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:model/BcfProject} bcfProject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfProject} and HTTP response
     */
    this.updateBcfProjectWithHttpInfo = function(id, bcfProject) {
      var postBody = bcfProject;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBcfProject");
      }

      // verify the required parameter 'bcfProject' is set
      if (bcfProject === undefined || bcfProject === null) {
        throw new Error("Missing the required parameter 'bcfProject' when calling updateBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:model/BcfProject} bcfProject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfProject}
     */
    this.updateBcfProject = function(id, bcfProject) {
      return this.updateBcfProjectWithHttpInfo(id, bcfProject)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this coloring.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} coloring 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coloring} and HTTP response
     */
    this.updateColoringWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, coloring) {
      var postBody = coloring;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateColoring");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateColoring");
      }

      // verify the required parameter 'coloring' is set
      if (coloring === undefined || coloring === null) {
        throw new Error("Missing the required parameter 'coloring' when calling updateColoring");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this coloring.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} coloring 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coloring}
     */
    this.updateColoring = function(id, projectsPk, topicsPk, viewpointsPk, coloring) {
      return this.updateColoringWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, coloring)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this comment.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} comment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    this.updateCommentWithHttpInfo = function(guid, projectsPk, topicsPk, comment) {
      var postBody = comment;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateComment");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{guid}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this comment.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} comment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    this.updateComment = function(guid, projectsPk, topicsPk, comment) {
      return this.updateCommentWithHttpInfo(guid, projectsPk, topicsPk, comment)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} projectsPk 
     * @param {module:model/Extensions} extensions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Extensions} and HTTP response
     */
    this.updateExtensionsWithHttpInfo = function(projectsPk, extensions) {
      var postBody = extensions;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateExtensions");
      }

      // verify the required parameter 'extensions' is set
      if (extensions === undefined || extensions === null) {
        throw new Error("Missing the required parameter 'extensions' when calling updateExtensions");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Extensions;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extensions', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} projectsPk 
     * @param {module:model/Extensions} extensions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Extensions}
     */
    this.updateExtensions = function(projectsPk, extensions) {
      return this.updateExtensionsWithHttpInfo(projectsPk, extensions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @param {module:model/SingleJsonTopic} singleJsonTopic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SingleJsonTopic} and HTTP response
     */
    this.updateFullTopicWithHttpInfo = function(guid, projectsPk, singleJsonTopic) {
      var postBody = singleJsonTopic;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateFullTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateFullTopic");
      }

      // verify the required parameter 'singleJsonTopic' is set
      if (singleJsonTopic === undefined || singleJsonTopic === null) {
        throw new Error("Missing the required parameter 'singleJsonTopic' when calling updateFullTopic");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleJsonTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @param {module:model/SingleJsonTopic} singleJsonTopic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SingleJsonTopic}
     */
    this.updateFullTopic = function(guid, projectsPk, singleJsonTopic) {
      return this.updateFullTopicWithHttpInfo(guid, projectsPk, singleJsonTopic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this component.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} component 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Component} and HTTP response
     */
    this.updateSelectionWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, component) {
      var postBody = component;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateSelection");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateSelection");
      }

      // verify the required parameter 'component' is set
      if (component === undefined || component === null) {
        throw new Error("Missing the required parameter 'component' when calling updateSelection");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this component.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} component 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Component}
     */
    this.updateSelection = function(id, projectsPk, topicsPk, viewpointsPk, component) {
      return this.updateSelectionWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, component)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @param {module:model/Topic} topic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    this.updateTopicWithHttpInfo = function(guid, projectsPk, topic) {
      var postBody = topic;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateTopic");
      }

      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling updateTopic");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this topic.
     * @param {String} projectsPk 
     * @param {module:model/Topic} topic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    this.updateTopic = function(guid, projectsPk, topic) {
      return this.updateTopicWithHttpInfo(guid, projectsPk, topic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} guid A UUID string identifying this viewpoint.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} viewpoint 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    this.updateViewpointWithHttpInfo = function(guid, projectsPk, topicsPk, viewpoint) {
      var postBody = viewpoint;

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateViewpoint");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateViewpoint");
      }

      // verify the required parameter 'viewpoint' is set
      if (viewpoint === undefined || viewpoint === null) {
        throw new Error("Missing the required parameter 'viewpoint' when calling updateViewpoint");
      }


      var pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{guid}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} guid A UUID string identifying this viewpoint.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} viewpoint 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    this.updateViewpoint = function(guid, projectsPk, topicsPk, viewpoint) {
      return this.updateViewpointWithHttpInfo(guid, projectsPk, topicsPk, viewpoint)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} id A unique integer value identifying this visibility.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} visibility 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visibility} and HTTP response
     */
    this.updateVisibilityWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, visibility) {
      var postBody = visibility;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateVisibility");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateVisibility");
      }

      // verify the required parameter 'visibility' is set
      if (visibility === undefined || visibility === null) {
        throw new Error("Missing the required parameter 'visibility' when calling updateVisibility");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id A unique integer value identifying this visibility.
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} visibility 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visibility}
     */
    this.updateVisibility = function(id, projectsPk, topicsPk, viewpointsPk, visibility) {
      return this.updateVisibilityWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, visibility)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
