/**
 * BIMData API
 * BIMData API documentation
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BcfProject', 'model/BimSnippet', 'model/Bitmap', 'model/Coloring', 'model/Comment', 'model/CommentEvent', 'model/Component', 'model/DocumentReference', 'model/Extensions', 'model/RelatedTopic', 'model/SelfUser', 'model/Snapshot', 'model/Topic', 'model/TopicEvents', 'model/Viewpoint', 'model/Visibility'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BcfProject'), require('../model/BimSnippet'), require('../model/Bitmap'), require('../model/Coloring'), require('../model/Comment'), require('../model/CommentEvent'), require('../model/Component'), require('../model/DocumentReference'), require('../model/Extensions'), require('../model/RelatedTopic'), require('../model/SelfUser'), require('../model/Snapshot'), require('../model/Topic'), require('../model/TopicEvents'), require('../model/Viewpoint'), require('../model/Visibility'));
  } else {
    // Browser globals (root is window)
    if (!root.bimdata) {
      root.bimdata = {};
    }
    root.bimdata.BcfApi = factory(root.bimdata.ApiClient, root.bimdata.BcfProject, root.bimdata.BimSnippet, root.bimdata.Bitmap, root.bimdata.Coloring, root.bimdata.Comment, root.bimdata.CommentEvent, root.bimdata.Component, root.bimdata.DocumentReference, root.bimdata.Extensions, root.bimdata.RelatedTopic, root.bimdata.SelfUser, root.bimdata.Snapshot, root.bimdata.Topic, root.bimdata.TopicEvents, root.bimdata.Viewpoint, root.bimdata.Visibility);
  }
}(this, function(ApiClient, BcfProject, BimSnippet, Bitmap, Coloring, Comment, CommentEvent, Component, DocumentReference, Extensions, RelatedTopic, SelfUser, Snapshot, Topic, TopicEvents, Viewpoint, Visibility) {
  'use strict';

  /**
   * Bcf service.
   * @module api/BcfApi
   * @version v1
   */

  /**
   * Constructs a new BcfApi. 
   * @alias module:api/BcfApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SelfUser>} and HTTP response
     */
    this.bcf21CurrentUserListWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SelfUser];

      return this.apiClient.callApi(
        '/bcf/2.1/current-user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SelfUser>}
     */
    this.bcf21CurrentUserList = function() {
      return this.bcf21CurrentUserListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bcf21ProjectsTopicsCommentsEventsDeleteWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bcf21ProjectsTopicsCommentsEventsDelete = function(id, projectsPk, topicsPk) {
      return this.bcf21ProjectsTopicsCommentsEventsDeleteWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bcf21ProjectsTopicsCommentsEventsDelete_0WithHttpInfo = function(commentsPk, id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsCommentsEventsDelete_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bcf21ProjectsTopicsCommentsEventsDelete_0 = function(commentsPk, id, projectsPk, topicsPk) {
      return this.bcf21ProjectsTopicsCommentsEventsDelete_0WithHttpInfo(commentsPk, id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bcf21ProjectsTopicsEventsDeleteWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsEventsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsEventsDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsEventsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bcf21ProjectsTopicsEventsDelete = function(id, projectsPk, topicsPk) {
      return this.bcf21ProjectsTopicsEventsDeleteWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bcf21ProjectsTopicsViewpointsBitmapDeleteWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsBitmapDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bcf21ProjectsTopicsViewpointsBitmapDelete = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.bcf21ProjectsTopicsViewpointsBitmapDeleteWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bcf21ProjectsTopicsViewpointsColoringDeleteWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsColoringDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bcf21ProjectsTopicsViewpointsColoringDelete = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.bcf21ProjectsTopicsViewpointsColoringDeleteWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bcf21ProjectsTopicsViewpointsDeleteWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bcf21ProjectsTopicsViewpointsDelete = function(id, projectsPk, topicsPk) {
      return this.bcf21ProjectsTopicsViewpointsDeleteWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bcf21ProjectsTopicsViewpointsSelectionDeleteWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsSelectionDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bcf21ProjectsTopicsViewpointsSelectionDelete = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.bcf21ProjectsTopicsViewpointsSelectionDeleteWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bcf21ProjectsTopicsViewpointsVisibilityDeleteWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling bcf21ProjectsTopicsViewpointsVisibilityDelete");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bcf21ProjectsTopicsViewpointsVisibilityDelete = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.bcf21ProjectsTopicsViewpointsVisibilityDeleteWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createBcfDocumentWithHttpInfo = function(projectsPk, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createBcfDocument");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'guid': opts['guid'],
        'filename': opts['filename']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createBcfDocument = function(projectsPk, opts) {
      return this.createBcfDocumentWithHttpInfo(projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {module:model/BcfProject} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfProject} and HTTP response
     */
    this.createBcfProjectWithHttpInfo = function(data) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createBcfProject");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {module:model/BcfProject} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfProject}
     */
    this.createBcfProject = function(data) {
      return this.createBcfProjectWithHttpInfo(data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Bitmap} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Bitmap} and HTTP response
     */
    this.createBitmapWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createBitmap");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createBitmap");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createBitmap");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createBitmap");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Bitmap} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Bitmap}
     */
    this.createBitmap = function(projectsPk, topicsPk, viewpointsPk, data) {
      return this.createBitmapWithHttpInfo(projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coloring} and HTTP response
     */
    this.createColoringWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createColoring");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createColoring");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createColoring");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coloring}
     */
    this.createColoring = function(projectsPk, topicsPk, viewpointsPk, data) {
      return this.createColoringWithHttpInfo(projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    this.createCommentWithHttpInfo = function(projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createComment");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createComment");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    this.createComment = function(projectsPk, topicsPk, data) {
      return this.createCommentWithHttpInfo(projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentEvent} and HTTP response
     */
    this.createCommentEventWithHttpInfo = function(projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createCommentEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createCommentEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCommentEvent");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentEvent}
     */
    this.createCommentEvent = function(projectsPk, topicsPk, data) {
      return this.createCommentEventWithHttpInfo(projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} commentsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentEvent} and HTTP response
     */
    this.createCommentEvent_0WithHttpInfo = function(commentsPk, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling createCommentEvent_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createCommentEvent_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createCommentEvent_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCommentEvent_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentEvent}
     */
    this.createCommentEvent_0 = function(commentsPk, projectsPk, topicsPk, data) {
      return this.createCommentEvent_0WithHttpInfo(commentsPk, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentReference} and HTTP response
     */
    this.createDocumentReferenceWithHttpInfo = function(projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createDocumentReference");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createDocumentReference");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createDocumentReference");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentReference}
     */
    this.createDocumentReference = function(projectsPk, topicsPk, data) {
      return this.createDocumentReferenceWithHttpInfo(projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BimSnippet} and HTTP response
     */
    this.createFileWithHttpInfo = function(projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createFile");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createFile");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createFile");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BimSnippet}
     */
    this.createFile = function(projectsPk, topicsPk, data) {
      return this.createFileWithHttpInfo(projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RelatedTopic} and HTTP response
     */
    this.createRelatedTopicWithHttpInfo = function(projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createRelatedTopic");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createRelatedTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createRelatedTopic");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RelatedTopic}
     */
    this.createRelatedTopic = function(projectsPk, topicsPk, data) {
      return this.createRelatedTopicWithHttpInfo(projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Component} and HTTP response
     */
    this.createSelectionWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createSelection");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createSelection");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createSelection");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Component}
     */
    this.createSelection = function(projectsPk, topicsPk, viewpointsPk, data) {
      return this.createSelectionWithHttpInfo(projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BimSnippet} and HTTP response
     */
    this.createSnippetWithHttpInfo = function(projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createSnippet");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createSnippet");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createSnippet");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BimSnippet}
     */
    this.createSnippet = function(projectsPk, topicsPk, data) {
      return this.createSnippetWithHttpInfo(projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    this.createTopicWithHttpInfo = function(projectsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createTopic");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    this.createTopic = function(projectsPk, data) {
      return this.createTopicWithHttpInfo(projectsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopicEvents} and HTTP response
     */
    this.createTopicEventWithHttpInfo = function(projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createTopicEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createTopicEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createTopicEvent");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopicEvents}
     */
    this.createTopicEvent = function(projectsPk, topicsPk, data) {
      return this.createTopicEventWithHttpInfo(projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    this.createViewpointWithHttpInfo = function(projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createViewpoint");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createViewpoint");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    this.createViewpoint = function(projectsPk, topicsPk, data) {
      return this.createViewpointWithHttpInfo(projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visibility} and HTTP response
     */
    this.createVisibilityWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling createVisibility");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling createVisibility");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createVisibility");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visibility}
     */
    this.createVisibility = function(projectsPk, topicsPk, viewpointsPk, data) {
      return this.createVisibilityWithHttpInfo(projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteBcfDocumentWithHttpInfo = function(id, projectsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBcfDocument");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteBcfDocument");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteBcfDocument = function(id, projectsPk) {
      return this.deleteBcfDocumentWithHttpInfo(id, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteBcfProjectWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteBcfProject = function(id) {
      return this.deleteBcfProjectWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCommentWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteComment");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteComment = function(id, projectsPk, topicsPk) {
      return this.deleteCommentWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteDocumentReferenceWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDocumentReference");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteDocumentReference");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteDocumentReference");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteDocumentReference = function(id, projectsPk, topicsPk) {
      return this.deleteDocumentReferenceWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteFileWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFile");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteFile");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteFile");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteFile = function(id, projectsPk, topicsPk) {
      return this.deleteFileWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRelatedTopicWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRelatedTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteRelatedTopic");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteRelatedTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRelatedTopic = function(id, projectsPk, topicsPk) {
      return this.deleteRelatedTopicWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSnippetWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSnippet");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteSnippet");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling deleteSnippet");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSnippet = function(id, projectsPk, topicsPk) {
      return this.deleteSnippetWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteTopicWithHttpInfo = function(id, projectsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteTopic = function(id, projectsPk) {
      return this.deleteTopicWithHttpInfo(id, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.fullUpdateBcfDocumentWithHttpInfo = function(id, projectsPk, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateBcfDocument");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateBcfDocument");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'guid': opts['guid'],
        'filename': opts['filename']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.fullUpdateBcfDocument = function(id, projectsPk, opts) {
      return this.fullUpdateBcfDocumentWithHttpInfo(id, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {module:model/BcfProject} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfProject} and HTTP response
     */
    this.fullUpdateBcfProjectWithHttpInfo = function(id, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateBcfProject");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {module:model/BcfProject} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfProject}
     */
    this.fullUpdateBcfProject = function(id, data) {
      return this.fullUpdateBcfProjectWithHttpInfo(id, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Bitmap} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Bitmap} and HTTP response
     */
    this.fullUpdateBitmapWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateBitmap");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateBitmap");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateBitmap");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateBitmap");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateBitmap");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Bitmap} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Bitmap}
     */
    this.fullUpdateBitmap = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      return this.fullUpdateBitmapWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coloring} and HTTP response
     */
    this.fullUpdateColoringWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateColoring");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateColoring");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateColoring");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coloring}
     */
    this.fullUpdateColoring = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      return this.fullUpdateColoringWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    this.fullUpdateCommentWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateComment");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateComment");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    this.fullUpdateComment = function(id, projectsPk, topicsPk, data) {
      return this.fullUpdateCommentWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentEvent} and HTTP response
     */
    this.fullUpdateCommentEventWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateCommentEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateCommentEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateCommentEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateCommentEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentEvent}
     */
    this.fullUpdateCommentEvent = function(id, projectsPk, topicsPk, data) {
      return this.fullUpdateCommentEventWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentEvent} and HTTP response
     */
    this.fullUpdateCommentEvent_0WithHttpInfo = function(commentsPk, id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling fullUpdateCommentEvent_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateCommentEvent_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateCommentEvent_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateCommentEvent_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateCommentEvent_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentEvent}
     */
    this.fullUpdateCommentEvent_0 = function(commentsPk, id, projectsPk, topicsPk, data) {
      return this.fullUpdateCommentEvent_0WithHttpInfo(commentsPk, id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentReference} and HTTP response
     */
    this.fullUpdateDocumentReferenceWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateDocumentReference");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateDocumentReference");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateDocumentReference");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateDocumentReference");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentReference}
     */
    this.fullUpdateDocumentReference = function(id, projectsPk, topicsPk, data) {
      return this.fullUpdateDocumentReferenceWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BimSnippet} and HTTP response
     */
    this.fullUpdateFileWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateFile");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateFile");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateFile");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateFile");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BimSnippet}
     */
    this.fullUpdateFile = function(id, projectsPk, topicsPk, data) {
      return this.fullUpdateFileWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RelatedTopic} and HTTP response
     */
    this.fullUpdateRelatedTopicWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRelatedTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateRelatedTopic");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateRelatedTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateRelatedTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RelatedTopic}
     */
    this.fullUpdateRelatedTopic = function(id, projectsPk, topicsPk, data) {
      return this.fullUpdateRelatedTopicWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Component} and HTTP response
     */
    this.fullUpdateSelectionWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateSelection");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateSelection");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateSelection");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Component}
     */
    this.fullUpdateSelection = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      return this.fullUpdateSelectionWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BimSnippet} and HTTP response
     */
    this.fullUpdateSnippetWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateSnippet");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateSnippet");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateSnippet");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateSnippet");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BimSnippet}
     */
    this.fullUpdateSnippet = function(id, projectsPk, topicsPk, data) {
      return this.fullUpdateSnippetWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    this.fullUpdateTopicWithHttpInfo = function(id, projectsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    this.fullUpdateTopic = function(id, projectsPk, data) {
      return this.fullUpdateTopicWithHttpInfo(id, projectsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopicEvents} and HTTP response
     */
    this.fullUpdateTopicEventWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateTopicEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateTopicEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateTopicEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateTopicEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopicEvents}
     */
    this.fullUpdateTopicEvent = function(id, projectsPk, topicsPk, data) {
      return this.fullUpdateTopicEventWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    this.fullUpdateViewpointWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateViewpoint");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateViewpoint");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateViewpoint");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    this.fullUpdateViewpoint = function(id, projectsPk, topicsPk, data) {
      return this.fullUpdateViewpointWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visibility} and HTTP response
     */
    this.fullUpdateVisibilityWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling fullUpdateVisibility");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateVisibility");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visibility}
     */
    this.fullUpdateVisibility = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      return this.fullUpdateVisibilityWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CommentEvent>} and HTTP response
     */
    this.getAllCommentsEventsWithHttpInfo = function(projectsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getAllCommentsEvents");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommentEvent];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/comments/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CommentEvent>}
     */
    this.getAllCommentsEvents = function(projectsPk) {
      return this.getAllCommentsEventsWithHttpInfo(projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TopicEvents>} and HTTP response
     */
    this.getAllTopicsEventsWithHttpInfo = function(projectsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getAllTopicsEvents");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TopicEvents];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TopicEvents>}
     */
    this.getAllTopicsEvents = function(projectsPk) {
      return this.getAllTopicsEventsWithHttpInfo(projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getBcfDocumentWithHttpInfo = function(id, projectsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBcfDocument");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getBcfDocument");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getBcfDocument = function(id, projectsPk) {
      return this.getBcfDocumentWithHttpInfo(id, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getBcfDocumentsWithHttpInfo = function(projectsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getBcfDocuments");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getBcfDocuments = function(projectsPk) {
      return this.getBcfDocumentsWithHttpInfo(projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfProject} and HTTP response
     */
    this.getBcfProjectWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfProject}
     */
    this.getBcfProject = function(id) {
      return this.getBcfProjectWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BcfProject>} and HTTP response
     */
    this.getBcfProjectsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BcfProject];

      return this.apiClient.callApi(
        '/bcf/2.1/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BcfProject>}
     */
    this.getBcfProjects = function() {
      return this.getBcfProjectsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Bitmap} and HTTP response
     */
    this.getBitmapWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBitmap");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getBitmap");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getBitmap");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getBitmap");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Bitmap}
     */
    this.getBitmap = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.getBitmapWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Bitmap>} and HTTP response
     */
    this.getBitmapsWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getBitmaps");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getBitmaps");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getBitmaps");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Bitmap];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Bitmap>}
     */
    this.getBitmaps = function(projectsPk, topicsPk, viewpointsPk) {
      return this.getBitmapsWithHttpInfo(projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coloring} and HTTP response
     */
    this.getColoringWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getColoring");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getColoring");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coloring}
     */
    this.getColoring = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.getColoringWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Coloring>} and HTTP response
     */
    this.getColoringsWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getColorings");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getColorings");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getColorings");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Coloring];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Coloring>}
     */
    this.getColorings = function(projectsPk, topicsPk, viewpointsPk) {
      return this.getColoringsWithHttpInfo(projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    this.getCommentWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getComment");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    this.getComment = function(id, projectsPk, topicsPk) {
      return this.getCommentWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentEvent} and HTTP response
     */
    this.getCommentEventWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCommentEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getCommentEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getCommentEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentEvent}
     */
    this.getCommentEvent = function(id, projectsPk, topicsPk) {
      return this.getCommentEventWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentEvent} and HTTP response
     */
    this.getCommentEvent_0WithHttpInfo = function(commentsPk, id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling getCommentEvent_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCommentEvent_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getCommentEvent_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getCommentEvent_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentEvent}
     */
    this.getCommentEvent_0 = function(commentsPk, id, projectsPk, topicsPk) {
      return this.getCommentEvent_0WithHttpInfo(commentsPk, id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CommentEvent>} and HTTP response
     */
    this.getCommentEventsWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getCommentEvents");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getCommentEvents");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommentEvent];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CommentEvent>}
     */
    this.getCommentEvents = function(projectsPk, topicsPk) {
      return this.getCommentEventsWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} commentsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CommentEvent>} and HTTP response
     */
    this.getCommentEvents_0WithHttpInfo = function(commentsPk, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling getCommentEvents_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getCommentEvents_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getCommentEvents_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommentEvent];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CommentEvent>}
     */
    this.getCommentEvents_0 = function(commentsPk, projectsPk, topicsPk) {
      return this.getCommentEvents_0WithHttpInfo(commentsPk, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Comment>} and HTTP response
     */
    this.getCommentsWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getComments");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getComments");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Comment];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Comment>}
     */
    this.getComments = function(projectsPk, topicsPk) {
      return this.getCommentsWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentReference} and HTTP response
     */
    this.getDocumentReferenceWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDocumentReference");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getDocumentReference");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getDocumentReference");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentReference}
     */
    this.getDocumentReference = function(id, projectsPk, topicsPk) {
      return this.getDocumentReferenceWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/DocumentReference>} and HTTP response
     */
    this.getDocumentReferencesWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getDocumentReferences");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getDocumentReferences");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DocumentReference];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/DocumentReference>}
     */
    this.getDocumentReferences = function(projectsPk, topicsPk) {
      return this.getDocumentReferencesWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Extensions>} and HTTP response
     */
    this.getExtensionsWithHttpInfo = function(projectsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getExtensions");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Extensions];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extensions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Extensions>}
     */
    this.getExtensions = function(projectsPk) {
      return this.getExtensionsWithHttpInfo(projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BimSnippet} and HTTP response
     */
    this.getFileWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFile");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getFile");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getFile");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BimSnippet}
     */
    this.getFile = function(id, projectsPk, topicsPk) {
      return this.getFileWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BimSnippet>} and HTTP response
     */
    this.getFilesWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getFiles");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getFiles");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BimSnippet];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BimSnippet>}
     */
    this.getFiles = function(projectsPk, topicsPk) {
      return this.getFilesWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RelatedTopic} and HTTP response
     */
    this.getRelatedTopicWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRelatedTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getRelatedTopic");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getRelatedTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RelatedTopic}
     */
    this.getRelatedTopic = function(id, projectsPk, topicsPk) {
      return this.getRelatedTopicWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RelatedTopic>} and HTTP response
     */
    this.getRelatedTopicsWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getRelatedTopics");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getRelatedTopics");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RelatedTopic];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RelatedTopic>}
     */
    this.getRelatedTopics = function(projectsPk, topicsPk) {
      return this.getRelatedTopicsWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Component} and HTTP response
     */
    this.getSelectionWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSelection");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getSelection");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Component}
     */
    this.getSelection = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.getSelectionWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Component>} and HTTP response
     */
    this.getSelectionsWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSelections");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSelections");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getSelections");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Component];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Component>}
     */
    this.getSelections = function(projectsPk, topicsPk, viewpointsPk) {
      return this.getSelectionsWithHttpInfo(projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Snapshot>} and HTTP response
     */
    this.getSnapshotsWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSnapshots");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSnapshots");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getSnapshots");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Snapshot];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/snapshot', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Snapshot>}
     */
    this.getSnapshots = function(projectsPk, topicsPk, viewpointsPk) {
      return this.getSnapshotsWithHttpInfo(projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BimSnippet} and HTTP response
     */
    this.getSnippetWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSnippet");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSnippet");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSnippet");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BimSnippet}
     */
    this.getSnippet = function(id, projectsPk, topicsPk) {
      return this.getSnippetWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BimSnippet>} and HTTP response
     */
    this.getSnippetsWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSnippets");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getSnippets");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BimSnippet];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BimSnippet>}
     */
    this.getSnippets = function(projectsPk, topicsPk) {
      return this.getSnippetsWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    this.getTopicWithHttpInfo = function(id, projectsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    this.getTopic = function(id, projectsPk) {
      return this.getTopicWithHttpInfo(id, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopicEvents} and HTTP response
     */
    this.getTopicEventWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTopicEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopicEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getTopicEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopicEvents}
     */
    this.getTopicEvent = function(id, projectsPk, topicsPk) {
      return this.getTopicEventWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TopicEvents>} and HTTP response
     */
    this.getTopicEventsWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopicEvents");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getTopicEvents");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TopicEvents];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TopicEvents>}
     */
    this.getTopicEvents = function(projectsPk, topicsPk) {
      return this.getTopicEventsWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Topic>} and HTTP response
     */
    this.getTopicsWithHttpInfo = function(projectsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopics");
      }


      var pathParams = {
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Topic];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Topic>}
     */
    this.getTopics = function(projectsPk) {
      return this.getTopicsWithHttpInfo(projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    this.getViewpointWithHttpInfo = function(id, projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getViewpoint");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getViewpoint");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    this.getViewpoint = function(id, projectsPk, topicsPk) {
      return this.getViewpointWithHttpInfo(id, projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Viewpoint>} and HTTP response
     */
    this.getViewpointsWithHttpInfo = function(projectsPk, topicsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoints");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getViewpoints");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Viewpoint];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Viewpoint>}
     */
    this.getViewpoints = function(projectsPk, topicsPk) {
      return this.getViewpointsWithHttpInfo(projectsPk, topicsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Visibility>} and HTTP response
     */
    this.getVisibilitiesWithHttpInfo = function(projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getVisibilities");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getVisibilities");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getVisibilities");
      }


      var pathParams = {
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Visibility];

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Visibility>}
     */
    this.getVisibilities = function(projectsPk, topicsPk, viewpointsPk) {
      return this.getVisibilitiesWithHttpInfo(projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visibility} and HTTP response
     */
    this.getVisibilityWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling getVisibility");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling getVisibility");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visibility}
     */
    this.getVisibility = function(id, projectsPk, topicsPk, viewpointsPk) {
      return this.getVisibilityWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateBcfDocumentWithHttpInfo = function(id, projectsPk, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBcfDocument");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateBcfDocument");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'guid': opts['guid'],
        'filename': opts['filename']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.guid 
     * @param {String} opts.filename 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateBcfDocument = function(id, projectsPk, opts) {
      return this.updateBcfDocumentWithHttpInfo(id, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {module:model/BcfProject} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfProject} and HTTP response
     */
    this.updateBcfProjectWithHttpInfo = function(id, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBcfProject");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateBcfProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BcfProject;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {module:model/BcfProject} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfProject}
     */
    this.updateBcfProject = function(id, data) {
      return this.updateBcfProjectWithHttpInfo(id, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Bitmap} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Bitmap} and HTTP response
     */
    this.updateBitmapWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBitmap");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateBitmap");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateBitmap");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateBitmap");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateBitmap");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bitmap;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Bitmap} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Bitmap}
     */
    this.updateBitmap = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      return this.updateBitmapWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coloring} and HTTP response
     */
    this.updateColoringWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateColoring");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateColoring");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateColoring");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateColoring");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateColoring");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Coloring;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Coloring} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coloring}
     */
    this.updateColoring = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      return this.updateColoringWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    this.updateCommentWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateComment");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateComment");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateComment");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateComment");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Comment} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    this.updateComment = function(id, projectsPk, topicsPk, data) {
      return this.updateCommentWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentEvent} and HTTP response
     */
    this.updateCommentEventWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCommentEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateCommentEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateCommentEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateCommentEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentEvent}
     */
    this.updateCommentEvent = function(id, projectsPk, topicsPk, data) {
      return this.updateCommentEventWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentEvent} and HTTP response
     */
    this.updateCommentEvent_0WithHttpInfo = function(commentsPk, id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'commentsPk' is set
      if (commentsPk === undefined || commentsPk === null) {
        throw new Error("Missing the required parameter 'commentsPk' when calling updateCommentEvent_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCommentEvent_0");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateCommentEvent_0");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateCommentEvent_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateCommentEvent_0");
      }


      var pathParams = {
        'comments_pk': commentsPk,
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentEvent;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} commentsPk 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/CommentEvent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentEvent}
     */
    this.updateCommentEvent_0 = function(commentsPk, id, projectsPk, topicsPk, data) {
      return this.updateCommentEvent_0WithHttpInfo(commentsPk, id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentReference} and HTTP response
     */
    this.updateDocumentReferenceWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDocumentReference");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateDocumentReference");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateDocumentReference");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateDocumentReference");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentReference;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/DocumentReference} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentReference}
     */
    this.updateDocumentReference = function(id, projectsPk, topicsPk, data) {
      return this.updateDocumentReferenceWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BimSnippet} and HTTP response
     */
    this.updateFileWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFile");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateFile");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateFile");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateFile");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BimSnippet}
     */
    this.updateFile = function(id, projectsPk, topicsPk, data) {
      return this.updateFileWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RelatedTopic} and HTTP response
     */
    this.updateRelatedTopicWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRelatedTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateRelatedTopic");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateRelatedTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateRelatedTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RelatedTopic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/RelatedTopic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RelatedTopic}
     */
    this.updateRelatedTopic = function(id, projectsPk, topicsPk, data) {
      return this.updateRelatedTopicWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Component} and HTTP response
     */
    this.updateSelectionWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSelection");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateSelection");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateSelection");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateSelection");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateSelection");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Component;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Component} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Component}
     */
    this.updateSelection = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      return this.updateSelectionWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BimSnippet} and HTTP response
     */
    this.updateSnippetWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSnippet");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateSnippet");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateSnippet");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateSnippet");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BimSnippet;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/BimSnippet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BimSnippet}
     */
    this.updateSnippet = function(id, projectsPk, topicsPk, data) {
      return this.updateSnippetWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    this.updateTopicWithHttpInfo = function(id, projectsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTopic");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateTopic");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateTopic");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    this.updateTopic = function(id, projectsPk, data) {
      return this.updateTopicWithHttpInfo(id, projectsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopicEvents} and HTTP response
     */
    this.updateTopicEventWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTopicEvent");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateTopicEvent");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateTopicEvent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateTopicEvent");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicEvents;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/TopicEvents} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopicEvents}
     */
    this.updateTopicEvent = function(id, projectsPk, topicsPk, data) {
      return this.updateTopicEventWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    this.updateViewpointWithHttpInfo = function(id, projectsPk, topicsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateViewpoint");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateViewpoint");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateViewpoint");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateViewpoint");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Viewpoint;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {module:model/Viewpoint} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    this.updateViewpoint = function(id, projectsPk, topicsPk, data) {
      return this.updateViewpointWithHttpInfo(id, projectsPk, topicsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visibility} and HTTP response
     */
    this.updateVisibilityWithHttpInfo = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVisibility");
      }

      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateVisibility");
      }

      // verify the required parameter 'topicsPk' is set
      if (topicsPk === undefined || topicsPk === null) {
        throw new Error("Missing the required parameter 'topicsPk' when calling updateVisibility");
      }

      // verify the required parameter 'viewpointsPk' is set
      if (viewpointsPk === undefined || viewpointsPk === null) {
        throw new Error("Missing the required parameter 'viewpointsPk' when calling updateVisibility");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateVisibility");
      }


      var pathParams = {
        'id': id,
        'projects_pk': projectsPk,
        'topics_pk': topicsPk,
        'viewpoints_pk': viewpointsPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Visibility;

      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id 
     * @param {String} projectsPk 
     * @param {String} topicsPk 
     * @param {String} viewpointsPk 
     * @param {module:model/Visibility} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visibility}
     */
    this.updateVisibility = function(id, projectsPk, topicsPk, viewpointsPk, data) {
      return this.updateVisibilityWithHttpInfo(id, projectsPk, topicsPk, viewpointsPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
