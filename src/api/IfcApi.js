/**
 * BIMData API
 * BIMData API documentation
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Classification', 'model/Element', 'model/ElementClassificationRelation', 'model/ElementPropertySetRelation', 'model/Ifc', 'model/IfcFiles', 'model/Property', 'model/PropertyDefinition', 'model/PropertySet', 'model/Space', 'model/Unit', 'model/Zone', 'model/ZoneSpace'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Classification'), require('../model/Element'), require('../model/ElementClassificationRelation'), require('../model/ElementPropertySetRelation'), require('../model/Ifc'), require('../model/IfcFiles'), require('../model/Property'), require('../model/PropertyDefinition'), require('../model/PropertySet'), require('../model/Space'), require('../model/Unit'), require('../model/Zone'), require('../model/ZoneSpace'));
  } else {
    // Browser globals (root is window)
    if (!root.bimdata) {
      root.bimdata = {};
    }
    root.bimdata.IfcApi = factory(root.bimdata.ApiClient, root.bimdata.Classification, root.bimdata.Element, root.bimdata.ElementClassificationRelation, root.bimdata.ElementPropertySetRelation, root.bimdata.Ifc, root.bimdata.IfcFiles, root.bimdata.Property, root.bimdata.PropertyDefinition, root.bimdata.PropertySet, root.bimdata.Space, root.bimdata.Unit, root.bimdata.Zone, root.bimdata.ZoneSpace);
  }
}(this, function(ApiClient, Classification, Element, ElementClassificationRelation, ElementPropertySetRelation, Ifc, IfcFiles, Property, PropertyDefinition, PropertySet, Space, Unit, Zone, ZoneSpace) {
  'use strict';

  /**
   * Ifc service.
   * @module api/IfcApi
   * @version 1.0.7
   */

  /**
   * Constructs a new IfcApi. 
   * @alias module:api/IfcApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the bulkDeleteIfcClassifications operation.
     * @callback module:api/IfcApi~bulkDeleteIfcClassificationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *              Delete relation between filtered classifications (eg. /classifications?name&#x3D;untec) and all ifc&#39;s elements.             No classification will be deleted on this endpoint, only the relation between ifc&#39;s elements and their classification.         
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~bulkDeleteIfcClassificationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bulkDeleteIfcClassifications = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcClassifications");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcClassifications");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcClassifications");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkDeleteIfcProperties operation.
     * @callback module:api/IfcApi~bulkDeleteIfcPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~bulkDeleteIfcPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bulkDeleteIfcProperties = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcProperties");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcProperties");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcProperties");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkDeleteIfcPropertyDefinitions operation.
     * @callback module:api/IfcApi~bulkDeleteIfcPropertyDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~bulkDeleteIfcPropertyDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bulkDeleteIfcPropertyDefinitions = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcPropertyDefinitions");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcPropertyDefinitions");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcPropertyDefinitions");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkDeleteIfcUnits operation.
     * @callback module:api/IfcApi~bulkDeleteIfcUnitsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~bulkDeleteIfcUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bulkDeleteIfcUnits = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcUnits");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcUnits");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcUnits");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkDeletePropertySet operation.
     * @callback module:api/IfcApi~bulkDeletePropertySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~bulkDeletePropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bulkDeletePropertySet = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeletePropertySet");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeletePropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeletePropertySet");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkRemoveClassificationsOfElement operation.
     * @callback module:api/IfcApi~bulkRemoveClassificationsOfElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted     
     * @param {String} projectPk 
     * @param {String} elementUuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~bulkRemoveClassificationsOfElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bulkRemoveClassificationsOfElement = function(projectPk, elementUuid, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveClassificationsOfElement");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling bulkRemoveClassificationsOfElement");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveClassificationsOfElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkRemoveClassificationsOfElement");
      }


      var pathParams = {
        'project_pk': projectPk,
        'element_uuid': elementUuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkRemoveElementsFromClassification operation.
     * @callback module:api/IfcApi~bulkRemoveElementsFromClassificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted     
     * @param {String} ifcClassificationPk 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~bulkRemoveElementsFromClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bulkRemoveElementsFromClassification = function(ifcClassificationPk, projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'ifcClassificationPk' is set
      if (ifcClassificationPk === undefined || ifcClassificationPk === null) {
        throw new Error("Missing the required parameter 'ifcClassificationPk' when calling bulkRemoveElementsFromClassification");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveElementsFromClassification");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveElementsFromClassification");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkRemoveElementsFromClassification");
      }


      var pathParams = {
        'ifc_classification_pk': ifcClassificationPk,
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createClassificationElementRelations operation.
     * @callback module:api/IfcApi~createClassificationElementRelationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          create association between existing classification and existing element     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/ElementClassificationRelation>} data 
     * @param {module:api/IfcApi~createClassificationElementRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createClassificationElementRelations = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassificationElementRelations");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassificationElementRelations");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createClassificationElementRelations");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createClassificationElementRelations");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createClassificationsOfElement operation.
     * @callback module:api/IfcApi~createClassificationsOfElementCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Classification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors          If classification created already exists, it will just be added to item&#39;s classifications and will not be duplicated     
     * @param {String} projectPk 
     * @param {String} elementUuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/Classification>} data 
     * @param {module:api/IfcApi~createClassificationsOfElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Classification>}
     */
    this.createClassificationsOfElement = function(projectPk, elementUuid, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassificationsOfElement");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createClassificationsOfElement");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassificationsOfElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createClassificationsOfElement");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createClassificationsOfElement");
      }


      var pathParams = {
        'project_pk': projectPk,
        'element_uuid': elementUuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Classification];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createElement operation.
     * @callback module:api/IfcApi~createElementCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Element>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/Element>} data 
     * @param {module:api/IfcApi~createElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Element>}
     */
    this.createElement = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElement");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElement");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElement");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Element];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createElementPropertySet operation.
     * @callback module:api/IfcApi~createElementPropertySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Create an property_set that will be automatically linked to the element     
     * @param {String} projectPk 
     * @param {String} elementUuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/PropertySet} data 
     * @param {module:api/IfcApi~createElementPropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createElementPropertySet = function(projectPk, elementUuid, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySet");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySet");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySet");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySet");
      }


      var pathParams = {
        'project_pk': projectPk,
        'element_uuid': elementUuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createElementPropertySetProperty operation.
     * @callback module:api/IfcApi~createElementPropertySetPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Property} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} propertysetPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:model/Property} data 
     * @param {module:api/IfcApi~createElementPropertySetPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Property}
     */
    this.createElementPropertySetProperty = function(propertysetPk, cloudPk, projectPk, ifcPk, elementUuid, data, callback) {
      var postBody = data;

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetProperty");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetProperty");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetProperty");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySetProperty");
      }


      var pathParams = {
        'propertyset_pk': propertysetPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createElementPropertySetPropertyDefinition operation.
     * @callback module:api/IfcApi~createElementPropertySetPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:model/PropertyDefinition} data 
     * @param {module:api/IfcApi~createElementPropertySetPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    this.createElementPropertySetPropertyDefinition = function(propertyPk, propertysetPk, cloudPk, projectPk, ifcPk, elementUuid, data, callback) {
      var postBody = data;

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySetPropertyDefinition");
      }


      var pathParams = {
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertyDefinition;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createElementPropertySetPropertyDefinitionUnit operation.
     * @callback module:api/IfcApi~createElementPropertySetPropertyDefinitionUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} propertydefinitionPk 
     * @param {String} elementUuid 
     * @param {module:model/Unit} data 
     * @param {module:api/IfcApi~createElementPropertySetPropertyDefinitionUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    this.createElementPropertySetPropertyDefinitionUnit = function(propertyPk, propertysetPk, cloudPk, projectPk, ifcPk, propertydefinitionPk, elementUuid, data, callback) {
      var postBody = data;

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySetPropertyDefinitionUnit");
      }


      var pathParams = {
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'propertydefinition_pk': propertydefinitionPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Unit;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createElement_0 operation.
     * @callback module:api/IfcApi~createElement_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          You can use the same optimized structure to post multiple elements ,property_sets, properties, definitions and units at once.         If the structure is malformed, an error 500 without more explaination will be returned         
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Element} data 
     * @param {module:api/IfcApi~createElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createElement_0 = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElement_0");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElement_0");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElement_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElement_0");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createIfcPropertyDefinition operation.
     * @callback module:api/IfcApi~createIfcPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyDefinition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors          If classification created already exists, it will just be added to item&#39;s classifications and will not be duplicated     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/PropertyDefinition>} data 
     * @param {module:api/IfcApi~createIfcPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyDefinition>}
     */
    this.createIfcPropertyDefinition = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createIfcPropertyDefinition");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createIfcPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createIfcPropertyDefinition");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createIfcPropertyDefinition");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PropertyDefinition];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createIfcUnit operation.
     * @callback module:api/IfcApi~createIfcUnitCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Unit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors          If classification created already exists, it will just be added to item&#39;s classifications and will not be duplicated     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/Unit>} data 
     * @param {module:api/IfcApi~createIfcUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Unit>}
     */
    this.createIfcUnit = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createIfcUnit");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createIfcUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createIfcUnit");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createIfcUnit");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Unit];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPropertySet operation.
     * @callback module:api/IfcApi~createPropertySetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertySet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors          If classification created already exists, it will just be added to item&#39;s classifications and will not be duplicated     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/PropertySet>} data 
     * @param {module:api/IfcApi~createPropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertySet>}
     */
    this.createPropertySet = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createPropertySet");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createPropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createPropertySet");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createPropertySet");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PropertySet];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPropertySetElementRelations operation.
     * @callback module:api/IfcApi~createPropertySetElementRelationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          create association between existing classification and existing element     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/ElementPropertySetRelation>} data 
     * @param {module:api/IfcApi~createPropertySetElementRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createPropertySetElementRelations = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createPropertySetElementRelations");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createPropertySetElementRelations");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createPropertySetElementRelations");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createPropertySetElementRelations");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSpace operation.
     * @callback module:api/IfcApi~createSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Space} data 
     * @param {module:api/IfcApi~createSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    this.createSpace = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createSpace");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createSpace");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createSpace");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Space;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createZone operation.
     * @callback module:api/IfcApi~createZoneCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Zone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/Element>} data 
     * @param {module:api/IfcApi~createZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Zone>}
     */
    this.createZone = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createZone");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createZone");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createZone");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createZone");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Zone];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createZoneSpace operation.
     * @callback module:api/IfcApi~createZoneSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneSpace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/ZoneSpace} data 
     * @param {module:api/IfcApi~createZoneSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneSpace}
     */
    this.createZoneSpace = function(projectPk, zonePk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createZoneSpace");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling createZoneSpace");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createZoneSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createZoneSpace");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createZoneSpace");
      }


      var pathParams = {
        'project_pk': projectPk,
        'zone_pk': zonePk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ZoneSpace;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteElement operation.
     * @callback module:api/IfcApi~deleteElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} uuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~deleteElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteElement = function(projectPk, uuid, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteElement");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteElement");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteElement");
      }


      var pathParams = {
        'project_pk': projectPk,
        'uuid': uuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIfc operation.
     * @callback module:api/IfcApi~deleteIfcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/IfcApi~deleteIfcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteIfc = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfc");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfc");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfc");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIfcProperty operation.
     * @callback module:api/IfcApi~deleteIfcPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~deleteIfcPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteIfcProperty = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcProperty");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcProperty");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcProperty");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIfcPropertyDefinition operation.
     * @callback module:api/IfcApi~deleteIfcPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~deleteIfcPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteIfcPropertyDefinition = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcPropertyDefinition");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcPropertyDefinition");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcPropertyDefinition");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIfcUnit operation.
     * @callback module:api/IfcApi~deleteIfcUnitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~deleteIfcUnitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteIfcUnit = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcUnit");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcUnit");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcUnit");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePropertySet operation.
     * @callback module:api/IfcApi~deletePropertySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~deletePropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePropertySet = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deletePropertySet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePropertySet");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deletePropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deletePropertySet");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpace operation.
     * @callback module:api/IfcApi~deleteSpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~deleteSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSpace = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSpace");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteSpace");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteZone operation.
     * @callback module:api/IfcApi~deleteZoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~deleteZoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteZone = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteZone");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteZone");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteZone");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteZone");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteZoneSpace operation.
     * @callback module:api/IfcApi~deleteZoneSpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} zonePk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~deleteZoneSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteZoneSpace = function(id, zonePk, cloudPk, projectPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteZoneSpace");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling deleteZoneSpace");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteZoneSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteZoneSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteZoneSpace");
      }


      var pathParams = {
        'id': id,
        'zone_pk': zonePk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateElement operation.
     * @callback module:api/IfcApi~fullUpdateElementCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Element>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/Element>} data 
     * @param {module:api/IfcApi~fullUpdateElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Element>}
     */
    this.fullUpdateElement = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateElement");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateElement");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateElement");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Element];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateElement_0 operation.
     * @callback module:api/IfcApi~fullUpdateElement_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Element} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} uuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Element} data 
     * @param {module:api/IfcApi~fullUpdateElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Element}
     */
    this.fullUpdateElement_0 = function(projectPk, uuid, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateElement_0");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling fullUpdateElement_0");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateElement_0");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateElement_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateElement_0");
      }


      var pathParams = {
        'project_pk': projectPk,
        'uuid': uuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Element;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateIfc operation.
     * @callback module:api/IfcApi~fullUpdateIfcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ifc} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:model/Ifc} data 
     * @param {module:api/IfcApi~fullUpdateIfcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ifc}
     */
    this.fullUpdateIfc = function(projectPk, id, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfc");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfc");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfc");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateIfc");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ifc;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateIfcProperty operation.
     * @callback module:api/IfcApi~fullUpdateIfcPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Property>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/Property>} data 
     * @param {module:api/IfcApi~fullUpdateIfcPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Property>}
     */
    this.fullUpdateIfcProperty = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfcProperty");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfcProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateIfcProperty");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateIfcProperty");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Property];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateIfcPropertyDefinition operation.
     * @callback module:api/IfcApi~fullUpdateIfcPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/PropertyDefinition} data 
     * @param {module:api/IfcApi~fullUpdateIfcPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    this.fullUpdateIfcPropertyDefinition = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfcPropertyDefinition");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfcPropertyDefinition");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfcPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateIfcPropertyDefinition");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateIfcPropertyDefinition");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertyDefinition;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateIfcProperty_0 operation.
     * @callback module:api/IfcApi~fullUpdateIfcProperty_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Property} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Property} data 
     * @param {module:api/IfcApi~fullUpdateIfcProperty_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Property}
     */
    this.fullUpdateIfcProperty_0 = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfcProperty_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfcProperty_0");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfcProperty_0");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateIfcProperty_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateIfcProperty_0");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateIfcUnit operation.
     * @callback module:api/IfcApi~fullUpdateIfcUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Unit} data 
     * @param {module:api/IfcApi~fullUpdateIfcUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    this.fullUpdateIfcUnit = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfcUnit");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfcUnit");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfcUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateIfcUnit");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateIfcUnit");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Unit;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdatePropertySet operation.
     * @callback module:api/IfcApi~fullUpdatePropertySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/PropertySet} data 
     * @param {module:api/IfcApi~fullUpdatePropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertySet}
     */
    this.fullUpdatePropertySet = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdatePropertySet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdatePropertySet");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdatePropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdatePropertySet");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdatePropertySet");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertySet;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateSpace operation.
     * @callback module:api/IfcApi~fullUpdateSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Space} data 
     * @param {module:api/IfcApi~fullUpdateSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    this.fullUpdateSpace = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateSpace");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateSpace");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateSpace");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Space;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateZone operation.
     * @callback module:api/IfcApi~fullUpdateZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Zone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Zone} data 
     * @param {module:api/IfcApi~fullUpdateZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Zone}
     */
    this.fullUpdateZone = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateZone");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateZone");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateZone");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateZone");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateZone");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Zone;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateZoneSpace operation.
     * @callback module:api/IfcApi~fullUpdateZoneSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneSpace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} zonePk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {module:model/ZoneSpace} data 
     * @param {module:api/IfcApi~fullUpdateZoneSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneSpace}
     */
    this.fullUpdateZoneSpace = function(id, zonePk, cloudPk, projectPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateZoneSpace");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling fullUpdateZoneSpace");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateZoneSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateZoneSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateZoneSpace");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateZoneSpace");
      }


      var pathParams = {
        'id': id,
        'zone_pk': zonePk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ZoneSpace;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClassificationsOfElement operation.
     * @callback module:api/IfcApi~getClassificationsOfElementCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Classification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} elementUuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getClassificationsOfElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Classification>}
     */
    this.getClassificationsOfElement = function(projectPk, elementUuid, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getClassificationsOfElement");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getClassificationsOfElement");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getClassificationsOfElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getClassificationsOfElement");
      }


      var pathParams = {
        'project_pk': projectPk,
        'element_uuid': elementUuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Classification];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElement operation.
     * @callback module:api/IfcApi~getElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Returns elements ,property_sets, properties, definitions and units in a optimized structure         
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getElement = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElement");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElement");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySet operation.
     * @callback module:api/IfcApi~getElementPropertySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:api/IfcApi~getElementPropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertySet}
     */
    this.getElementPropertySet = function(id, projectPk, cloudPk, ifcPk, elementUuid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySet");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySet");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySet");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertySet;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetProperties operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Property>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} propertysetPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:api/IfcApi~getElementPropertySetPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Property>}
     */
    this.getElementPropertySetProperties = function(propertysetPk, cloudPk, projectPk, ifcPk, elementUuid, callback) {
      var postBody = null;

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetProperties");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetProperties");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetProperties");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetProperties");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetProperties");
      }


      var pathParams = {
        'propertyset_pk': propertysetPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Property];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetProperty operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Property} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} propertysetPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:api/IfcApi~getElementPropertySetPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Property}
     */
    this.getElementPropertySetProperty = function(id, propertysetPk, cloudPk, projectPk, ifcPk, elementUuid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetProperty");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetProperty");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetProperty");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetProperty");
      }


      var pathParams = {
        'id': id,
        'propertyset_pk': propertysetPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetPropertyDefinition operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:api/IfcApi~getElementPropertySetPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    this.getElementPropertySetPropertyDefinition = function(id, propertyPk, propertysetPk, cloudPk, projectPk, ifcPk, elementUuid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinition");
      }


      var pathParams = {
        'id': id,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertyDefinition;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetPropertyDefinitionUnit operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertyDefinitionUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {String} propertydefinitionPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getElementPropertySetPropertyDefinitionUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    this.getElementPropertySetPropertyDefinitionUnit = function(id, propertyPk, propertysetPk, propertydefinitionPk, elementUuid, ifcPk, cloudPk, projectPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }


      var pathParams = {
        'id': id,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk,
        'propertydefinition_pk': propertydefinitionPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Unit;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetPropertyDefinitionUnits operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertyDefinitionUnitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Unit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} propertydefinitionPk 
     * @param {String} elementUuid 
     * @param {module:api/IfcApi~getElementPropertySetPropertyDefinitionUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Unit>}
     */
    this.getElementPropertySetPropertyDefinitionUnits = function(propertyPk, propertysetPk, cloudPk, projectPk, ifcPk, propertydefinitionPk, elementUuid, callback) {
      var postBody = null;

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionUnits");
      }


      var pathParams = {
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'propertydefinition_pk': propertydefinitionPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Unit];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetPropertyDefinitions operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertyDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyDefinition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:api/IfcApi~getElementPropertySetPropertyDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyDefinition>}
     */
    this.getElementPropertySetPropertyDefinitions = function(propertyPk, propertysetPk, cloudPk, projectPk, ifcPk, elementUuid, callback) {
      var postBody = null;

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitions");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitions");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitions");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitions");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitions");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitions");
      }


      var pathParams = {
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PropertyDefinition];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySets operation.
     * @callback module:api/IfcApi~getElementPropertySetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertySet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} elementUuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getElementPropertySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertySet>}
     */
    this.getElementPropertySets = function(projectPk, elementUuid, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySets");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySets");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySets");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySets");
      }


      var pathParams = {
        'project_pk': projectPk,
        'element_uuid': elementUuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PropertySet];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElement_0 operation.
     * @callback module:api/IfcApi~getElement_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Element} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} uuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Element}
     */
    this.getElement_0 = function(projectPk, uuid, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElement_0");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getElement_0");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElement_0");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElement_0");
      }


      var pathParams = {
        'project_pk': projectPk,
        'uuid': uuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Element;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElements operation.
     * @callback module:api/IfcApi~getElementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Element>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Element>}
     */
    this.getElements = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElements");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElements");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElements");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Element];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementsFromClassification operation.
     * @callback module:api/IfcApi~getElementsFromClassificationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Element>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} ifcClassificationPk 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getElementsFromClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Element>}
     */
    this.getElementsFromClassification = function(ifcClassificationPk, projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'ifcClassificationPk' is set
      if (ifcClassificationPk === undefined || ifcClassificationPk === null) {
        throw new Error("Missing the required parameter 'ifcClassificationPk' when calling getElementsFromClassification");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementsFromClassification");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementsFromClassification");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementsFromClassification");
      }


      var pathParams = {
        'ifc_classification_pk': ifcClassificationPk,
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Element];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfc operation.
     * @callback module:api/IfcApi~getIfcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ifc} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/IfcApi~getIfcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ifc}
     */
    this.getIfc = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfc");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfc");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfc");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ifc;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcBVH operation.
     * @callback module:api/IfcApi~getIfcBVHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the bvh file         
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/IfcApi~getIfcBVHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getIfcBVH = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcBVH");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcBVH");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcBVH");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/bvh', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcClassifications operation.
     * @callback module:api/IfcApi~getIfcClassificationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Classification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getIfcClassificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Classification>}
     */
    this.getIfcClassifications = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcClassifications");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcClassifications");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcClassifications");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Classification];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcGLTF operation.
     * @callback module:api/IfcApi~getIfcGLTFCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the gltf file         
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/IfcApi~getIfcGLTFCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getIfcGLTF = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcGLTF");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcGLTF");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcGLTF");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/gltf', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcMap operation.
     * @callback module:api/IfcApi~getIfcMapCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the map file         
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/IfcApi~getIfcMapCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getIfcMap = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcMap");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcMap");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcMap");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/map', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcProperties operation.
     * @callback module:api/IfcApi~getIfcPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Property>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getIfcPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Property>}
     */
    this.getIfcProperties = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcProperties");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcProperties");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcProperties");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Property];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcProperty operation.
     * @callback module:api/IfcApi~getIfcPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Property} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getIfcPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Property}
     */
    this.getIfcProperty = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcProperty");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcProperty");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcProperty");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcPropertyDefinition operation.
     * @callback module:api/IfcApi~getIfcPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getIfcPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    this.getIfcPropertyDefinition = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcPropertyDefinition");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcPropertyDefinition");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcPropertyDefinition");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertyDefinition;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcPropertyDefinitions operation.
     * @callback module:api/IfcApi~getIfcPropertyDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyDefinition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getIfcPropertyDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyDefinition>}
     */
    this.getIfcPropertyDefinitions = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcPropertyDefinitions");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcPropertyDefinitions");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcPropertyDefinitions");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PropertyDefinition];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcStructure operation.
     * @callback module:api/IfcApi~getIfcStructureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the structure file         
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/IfcApi~getIfcStructureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getIfcStructure = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcStructure");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcStructure");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcStructure");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/structure', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcSystems operation.
     * @callback module:api/IfcApi~getIfcSystemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the system file         
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:api/IfcApi~getIfcSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getIfcSystems = function(projectPk, id, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcSystems");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcSystems");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcSystems");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/systems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcUnit operation.
     * @callback module:api/IfcApi~getIfcUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getIfcUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    this.getIfcUnit = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcUnit");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcUnit");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcUnit");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Unit;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcUnits operation.
     * @callback module:api/IfcApi~getIfcUnitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Unit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getIfcUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Unit>}
     */
    this.getIfcUnits = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcUnits");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcUnits");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcUnits");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Unit];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcs operation.
     * @callback module:api/IfcApi~getIfcsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ifc>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:api/IfcApi~getIfcsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ifc>}
     */
    this.getIfcs = function(projectPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcs");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcs");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Ifc];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertySet operation.
     * @callback module:api/IfcApi~getPropertySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getPropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertySet}
     */
    this.getPropertySet = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getPropertySet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPropertySet");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getPropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getPropertySet");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertySet;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertySets operation.
     * @callback module:api/IfcApi~getPropertySetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertySet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getPropertySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertySet>}
     */
    this.getPropertySets = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getPropertySets");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getPropertySets");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getPropertySets");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PropertySet];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpace operation.
     * @callback module:api/IfcApi~getSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    this.getSpace = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpace");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSpace");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Space;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpaces operation.
     * @callback module:api/IfcApi~getSpacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Space>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getSpacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Space>}
     */
    this.getSpaces = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSpaces");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSpaces");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSpaces");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Space];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getZone operation.
     * @callback module:api/IfcApi~getZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Zone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Zone}
     */
    this.getZone = function(projectPk, id, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZone");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZone");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZone");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZone");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Zone;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getZoneSpace operation.
     * @callback module:api/IfcApi~getZoneSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneSpace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} zonePk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getZoneSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneSpace}
     */
    this.getZoneSpace = function(id, zonePk, cloudPk, projectPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZoneSpace");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling getZoneSpace");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZoneSpace");
      }


      var pathParams = {
        'id': id,
        'zone_pk': zonePk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ZoneSpace;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getZoneSpaces operation.
     * @callback module:api/IfcApi~getZoneSpacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ZoneSpace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getZoneSpacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ZoneSpace>}
     */
    this.getZoneSpaces = function(projectPk, zonePk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneSpaces");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling getZoneSpaces");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneSpaces");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZoneSpaces");
      }


      var pathParams = {
        'project_pk': projectPk,
        'zone_pk': zonePk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ZoneSpace];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getZones operation.
     * @callback module:api/IfcApi~getZonesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Zone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:api/IfcApi~getZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Zone>}
     */
    this.getZones = function(projectPk, cloudPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZones");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZones");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZones");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Zone];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeClassificationOfElement operation.
     * @callback module:api/IfcApi~removeClassificationOfElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:api/IfcApi~removeClassificationOfElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeClassificationOfElement = function(id, projectPk, cloudPk, ifcPk, elementUuid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeClassificationOfElement");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeClassificationOfElement");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeClassificationOfElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeClassificationOfElement");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeClassificationOfElement");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementPropertySet operation.
     * @callback module:api/IfcApi~removeElementPropertySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Delete the relation between the element and the property set. Does not delete any object     
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:api/IfcApi~removeElementPropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeElementPropertySet = function(id, projectPk, cloudPk, ifcPk, elementUuid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySet");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySet");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySet");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementPropertySetProperty operation.
     * @callback module:api/IfcApi~removeElementPropertySetPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} propertysetPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:api/IfcApi~removeElementPropertySetPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeElementPropertySetProperty = function(id, propertysetPk, cloudPk, projectPk, ifcPk, elementUuid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetProperty");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetProperty");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetProperty");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetProperty");
      }


      var pathParams = {
        'id': id,
        'propertyset_pk': propertysetPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementPropertySetPropertyDefinition operation.
     * @callback module:api/IfcApi~removeElementPropertySetPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} elementUuid 
     * @param {module:api/IfcApi~removeElementPropertySetPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeElementPropertySetPropertyDefinition = function(id, propertyPk, propertysetPk, cloudPk, projectPk, ifcPk, elementUuid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDefinition");
      }


      var pathParams = {
        'id': id,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'element_uuid': elementUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementPropertySetPropertyDefinitionUnit operation.
     * @callback module:api/IfcApi~removeElementPropertySetPropertyDefinitionUnitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {String} propertydefinitionPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~removeElementPropertySetPropertyDefinitionUnitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeElementPropertySetPropertyDefinitionUnit = function(id, propertyPk, propertysetPk, propertydefinitionPk, elementUuid, ifcPk, cloudPk, projectPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }


      var pathParams = {
        'id': id,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk,
        'propertydefinition_pk': propertydefinitionPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementsFromClassification operation.
     * @callback module:api/IfcApi~removeElementsFromClassificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} uuid 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} ifcClassificationPk 
     * @param {module:api/IfcApi~removeElementsFromClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeElementsFromClassification = function(uuid, cloudPk, projectPk, ifcPk, ifcClassificationPk, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling removeElementsFromClassification");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementsFromClassification");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementsFromClassification");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementsFromClassification");
      }

      // verify the required parameter 'ifcClassificationPk' is set
      if (ifcClassificationPk === undefined || ifcClassificationPk === null) {
        throw new Error("Missing the required parameter 'ifcClassificationPk' when calling removeElementsFromClassification");
      }


      var pathParams = {
        'uuid': uuid,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'ifc_classification_pk': ifcClassificationPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/{uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateElement operation.
     * @callback module:api/IfcApi~updateElementCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Element>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/Element>} data 
     * @param {module:api/IfcApi~updateElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Element>}
     */
    this.updateElement = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateElement");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateElement");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateElement");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Element];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateElement_0 operation.
     * @callback module:api/IfcApi~updateElement_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Element} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} uuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Element} data 
     * @param {module:api/IfcApi~updateElement_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Element}
     */
    this.updateElement_0 = function(projectPk, uuid, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateElement_0");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateElement_0");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateElement_0");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateElement_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateElement_0");
      }


      var pathParams = {
        'project_pk': projectPk,
        'uuid': uuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Element;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfc operation.
     * @callback module:api/IfcApi~updateIfcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ifc} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {module:model/Ifc} data 
     * @param {module:api/IfcApi~updateIfcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ifc}
     */
    this.updateIfc = function(projectPk, id, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfc");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfc");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfc");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfc");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ifc;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfcFiles operation.
     * @callback module:api/IfcApi~updateIfcFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IfcFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Patch ifc files (gltf, structure, svg, etc)         
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {Object} opts Optional parameters
     * @param {File} opts.structureFile 
     * @param {File} opts.systemsFile 
     * @param {File} opts.mapFile 
     * @param {File} opts.gltfFile 
     * @param {File} opts.bvhTreeFile 
     * @param {module:api/IfcApi~updateIfcFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IfcFiles}
     */
    this.updateIfcFiles = function(projectPk, id, cloudPk, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcFiles");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcFiles");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcFiles");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'structure_file': opts['structureFile'],
        'systems_file': opts['systemsFile'],
        'map_file': opts['mapFile'],
        'gltf_file': opts['gltfFile'],
        'bvh_tree_file': opts['bvhTreeFile']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = IfcFiles;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/files', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfcProperty operation.
     * @callback module:api/IfcApi~updateIfcPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Property>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors     
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {Array.<module:model/Property>} data 
     * @param {module:api/IfcApi~updateIfcPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Property>}
     */
    this.updateIfcProperty = function(projectPk, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcProperty");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcProperty");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcProperty");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Property];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfcPropertyDefinition operation.
     * @callback module:api/IfcApi~updateIfcPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/PropertyDefinition} data 
     * @param {module:api/IfcApi~updateIfcPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    this.updateIfcPropertyDefinition = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcPropertyDefinition");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcPropertyDefinition");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcPropertyDefinition");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcPropertyDefinition");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertyDefinition;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfcProperty_0 operation.
     * @callback module:api/IfcApi~updateIfcProperty_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Property} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Property} data 
     * @param {module:api/IfcApi~updateIfcProperty_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Property}
     */
    this.updateIfcProperty_0 = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcProperty_0");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcProperty_0");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcProperty_0");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcProperty_0");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcProperty_0");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfcUnit operation.
     * @callback module:api/IfcApi~updateIfcUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Unit} data 
     * @param {module:api/IfcApi~updateIfcUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    this.updateIfcUnit = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcUnit");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcUnit");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcUnit");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcUnit");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Unit;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePropertySet operation.
     * @callback module:api/IfcApi~updatePropertySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/PropertySet} data 
     * @param {module:api/IfcApi~updatePropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertySet}
     */
    this.updatePropertySet = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updatePropertySet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePropertySet");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updatePropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updatePropertySet");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updatePropertySet");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertySet;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSpace operation.
     * @callback module:api/IfcApi~updateSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Space} data 
     * @param {module:api/IfcApi~updateSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    this.updateSpace = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSpace");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateSpace");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateSpace");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Space;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateZone operation.
     * @callback module:api/IfcApi~updateZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Zone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {module:model/Zone} data 
     * @param {module:api/IfcApi~updateZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Zone}
     */
    this.updateZone = function(projectPk, id, cloudPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateZone");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateZone");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateZone");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateZone");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateZone");
      }


      var pathParams = {
        'project_pk': projectPk,
        'id': id,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Zone;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateZoneSpace operation.
     * @callback module:api/IfcApi~updateZoneSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneSpace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} zonePk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {module:model/ZoneSpace} data 
     * @param {module:api/IfcApi~updateZoneSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneSpace}
     */
    this.updateZoneSpace = function(id, zonePk, cloudPk, projectPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateZoneSpace");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling updateZoneSpace");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateZoneSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateZoneSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateZoneSpace");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateZoneSpace");
      }


      var pathParams = {
        'id': id,
        'zone_pk': zonePk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ZoneSpace;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
