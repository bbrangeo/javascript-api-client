/**
 * BIMData API
 * BIMData API documentation
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CheckPlan', 'model/CheckPlanResult', 'model/IfcChecker', 'model/Rule', 'model/RuleComponent', 'model/Ruleset'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CheckPlan'), require('../model/CheckPlanResult'), require('../model/IfcChecker'), require('../model/Rule'), require('../model/RuleComponent'), require('../model/Ruleset'));
  } else {
    // Browser globals (root is window)
    if (!root.bimdata) {
      root.bimdata = {};
    }
    root.bimdata.CheckplanApi = factory(root.bimdata.ApiClient, root.bimdata.CheckPlan, root.bimdata.CheckPlanResult, root.bimdata.IfcChecker, root.bimdata.Rule, root.bimdata.RuleComponent, root.bimdata.Ruleset);
  }
}(this, function(ApiClient, CheckPlan, CheckPlanResult, IfcChecker, Rule, RuleComponent, Ruleset) {
  'use strict';

  /**
   * Checkplan service.
   * @module api/CheckplanApi
   * @version 1.0.3
   */

  /**
   * Constructs a new CheckplanApi. 
   * @alias module:api/CheckplanApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCheckPlanResult operation.
     * @callback module:api/CheckplanApi~createCheckPlanResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPlanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {module:model/CheckPlanResult} data 
     * @param {module:api/CheckplanApi~createCheckPlanResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckPlanResult}
     */
    this.createCheckPlanResult = function(projectPk, ifcPk, checkerPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createCheckPlanResult");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createCheckPlanResult");
      }

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling createCheckPlanResult");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createCheckPlanResult");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCheckPlanResult");
      }


      var pathParams = {
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlanResult;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createChecker operation.
     * @callback module:api/CheckplanApi~createCheckerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IfcChecker} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} cloudPk 
     * @param {module:model/IfcChecker} data 
     * @param {module:api/CheckplanApi~createCheckerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IfcChecker}
     */
    this.createChecker = function(projectPk, ifcPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createChecker");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createChecker");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createChecker");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createChecker");
      }


      var pathParams = {
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IfcChecker;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCheckplan operation.
     * @callback module:api/CheckplanApi~createCheckplanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:model/CheckPlan} data 
     * @param {module:api/CheckplanApi~createCheckplanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckPlan}
     */
    this.createCheckplan = function(projectPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createCheckplan");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createCheckplan");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCheckplan");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlan;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRule operation.
     * @callback module:api/CheckplanApi~createRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {module:model/Rule} data 
     * @param {module:api/CheckplanApi~createRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    this.createRule = function(rulesetPk, projectPk, checkPlanPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling createRule");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRule");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRule");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRule");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createRule");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRuleComponent operation.
     * @callback module:api/CheckplanApi~createRuleComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleComponent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} rulePk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {module:model/RuleComponent} data 
     * @param {module:api/CheckplanApi~createRuleComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleComponent}
     */
    this.createRuleComponent = function(rulesetPk, rulePk, cloudPk, projectPk, checkPlanPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling createRuleComponent");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling createRuleComponent");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRuleComponent");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRuleComponent");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRuleComponent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createRuleComponent");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'rule_pk': rulePk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RuleComponent;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRuleset operation.
     * @callback module:api/CheckplanApi~createRulesetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ruleset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {module:model/Ruleset} data 
     * @param {module:api/CheckplanApi~createRulesetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ruleset}
     */
    this.createRuleset = function(projectPk, checkPlanPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRuleset");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRuleset");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRuleset");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createRuleset");
      }


      var pathParams = {
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ruleset;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCheckPlanResult operation.
     * @callback module:api/CheckplanApi~deleteCheckPlanResultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {module:api/CheckplanApi~deleteCheckPlanResultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCheckPlanResult = function(id, checkerPk, cloudPk, projectPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckPlanResult");
      }

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling deleteCheckPlanResult");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCheckPlanResult");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteCheckPlanResult");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteCheckPlanResult");
      }


      var pathParams = {
        'id': id,
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChecker operation.
     * @callback module:api/CheckplanApi~deleteCheckerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~deleteCheckerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChecker = function(id, projectPk, ifcPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChecker");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteChecker");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteChecker");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteChecker");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCheckplan operation.
     * @callback module:api/CheckplanApi~deleteCheckplanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~deleteCheckplanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCheckplan = function(id, projectPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckplan");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteCheckplan");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCheckplan");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRule operation.
     * @callback module:api/CheckplanApi~deleteRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {module:api/CheckplanApi~deleteRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRule = function(rulesetPk, id, cloudPk, projectPk, checkPlanPk, callback) {
      var postBody = null;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling deleteRule");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRule");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRule");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRule");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRule");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'id': id,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRuleComponent operation.
     * @callback module:api/CheckplanApi~deleteRuleComponentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} id 
     * @param {String} rulePk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {module:api/CheckplanApi~deleteRuleComponentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRuleComponent = function(rulesetPk, id, rulePk, cloudPk, projectPk, checkPlanPk, callback) {
      var postBody = null;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling deleteRuleComponent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRuleComponent");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling deleteRuleComponent");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRuleComponent");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRuleComponent");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRuleComponent");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'id': id,
        'rule_pk': rulePk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRuleset operation.
     * @callback module:api/CheckplanApi~deleteRulesetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~deleteRulesetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRuleset = function(id, projectPk, checkPlanPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRuleset");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRuleset");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRuleset");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRuleset");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateCheckPlanResult operation.
     * @callback module:api/CheckplanApi~fullUpdateCheckPlanResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPlanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {module:model/CheckPlanResult} data 
     * @param {module:api/CheckplanApi~fullUpdateCheckPlanResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckPlanResult}
     */
    this.fullUpdateCheckPlanResult = function(id, checkerPk, cloudPk, projectPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateCheckPlanResult");
      }

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling fullUpdateCheckPlanResult");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateCheckPlanResult");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateCheckPlanResult");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateCheckPlanResult");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateCheckPlanResult");
      }


      var pathParams = {
        'id': id,
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlanResult;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateChecker operation.
     * @callback module:api/CheckplanApi~fullUpdateCheckerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IfcChecker} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} cloudPk 
     * @param {module:model/IfcChecker} data 
     * @param {module:api/CheckplanApi~fullUpdateCheckerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IfcChecker}
     */
    this.fullUpdateChecker = function(id, projectPk, ifcPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateChecker");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateChecker");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateChecker");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateChecker");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateChecker");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IfcChecker;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateCheckplan operation.
     * @callback module:api/CheckplanApi~fullUpdateCheckplanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:model/CheckPlan} data 
     * @param {module:api/CheckplanApi~fullUpdateCheckplanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckPlan}
     */
    this.fullUpdateCheckplan = function(id, projectPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateCheckplan");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateCheckplan");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateCheckplan");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateCheckplan");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlan;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateRule operation.
     * @callback module:api/CheckplanApi~fullUpdateRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {module:model/Rule} data 
     * @param {module:api/CheckplanApi~fullUpdateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    this.fullUpdateRule = function(rulesetPk, id, cloudPk, projectPk, checkPlanPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling fullUpdateRule");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRule");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateRule");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateRule");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling fullUpdateRule");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateRule");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'id': id,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateRuleComponent operation.
     * @callback module:api/CheckplanApi~fullUpdateRuleComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleComponent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} id 
     * @param {String} rulePk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {module:model/RuleComponent} data 
     * @param {module:api/CheckplanApi~fullUpdateRuleComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleComponent}
     */
    this.fullUpdateRuleComponent = function(rulesetPk, id, rulePk, cloudPk, projectPk, checkPlanPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateRuleComponent");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'id': id,
        'rule_pk': rulePk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RuleComponent;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateRuleset operation.
     * @callback module:api/CheckplanApi~fullUpdateRulesetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ruleset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {module:model/Ruleset} data 
     * @param {module:api/CheckplanApi~fullUpdateRulesetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ruleset}
     */
    this.fullUpdateRuleset = function(id, projectPk, checkPlanPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRuleset");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateRuleset");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling fullUpdateRuleset");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateRuleset");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateRuleset");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ruleset;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCheckPlanResult operation.
     * @callback module:api/CheckplanApi~getCheckPlanResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPlanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {module:api/CheckplanApi~getCheckPlanResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckPlanResult}
     */
    this.getCheckPlanResult = function(id, checkerPk, cloudPk, projectPk, ifcPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckPlanResult");
      }

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling getCheckPlanResult");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckPlanResult");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckPlanResult");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckPlanResult");
      }


      var pathParams = {
        'id': id,
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlanResult;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCheckPlanResults operation.
     * @callback module:api/CheckplanApi~getCheckPlanResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CheckPlanResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~getCheckPlanResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CheckPlanResult>}
     */
    this.getCheckPlanResults = function(projectPk, ifcPk, checkerPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckPlanResults");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckPlanResults");
      }

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling getCheckPlanResults");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckPlanResults");
      }


      var pathParams = {
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CheckPlanResult];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecker operation.
     * @callback module:api/CheckplanApi~getCheckerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IfcChecker} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~getCheckerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IfcChecker}
     */
    this.getChecker = function(id, projectPk, ifcPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChecker");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getChecker");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getChecker");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getChecker");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IfcChecker;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCheckers operation.
     * @callback module:api/CheckplanApi~getCheckersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IfcChecker>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~getCheckersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IfcChecker>}
     */
    this.getCheckers = function(projectPk, ifcPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckers");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckers");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckers");
      }


      var pathParams = {
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [IfcChecker];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCheckplan operation.
     * @callback module:api/CheckplanApi~getCheckplanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~getCheckplanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckPlan}
     */
    this.getCheckplan = function(id, projectPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckplan");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckplan");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckplan");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlan;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCheckplans operation.
     * @callback module:api/CheckplanApi~getCheckplansCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CheckPlan>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~getCheckplansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CheckPlan>}
     */
    this.getCheckplans = function(projectPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckplans");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckplans");
      }


      var pathParams = {
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CheckPlan];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRule operation.
     * @callback module:api/CheckplanApi~getRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {module:api/CheckplanApi~getRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    this.getRule = function(rulesetPk, id, cloudPk, projectPk, checkPlanPk, callback) {
      var postBody = null;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRule");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRule");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRule");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRule");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRule");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'id': id,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRuleComponent operation.
     * @callback module:api/CheckplanApi~getRuleComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleComponent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} id 
     * @param {String} rulePk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {module:api/CheckplanApi~getRuleComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleComponent}
     */
    this.getRuleComponent = function(rulesetPk, id, rulePk, cloudPk, projectPk, checkPlanPk, callback) {
      var postBody = null;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRuleComponent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRuleComponent");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling getRuleComponent");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleComponent");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleComponent");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleComponent");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'id': id,
        'rule_pk': rulePk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RuleComponent;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRuleComponents operation.
     * @callback module:api/CheckplanApi~getRuleComponentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleComponent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} rulePk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {module:api/CheckplanApi~getRuleComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleComponent>}
     */
    this.getRuleComponents = function(rulesetPk, rulePk, cloudPk, projectPk, checkPlanPk, callback) {
      var postBody = null;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRuleComponents");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling getRuleComponents");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleComponents");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleComponents");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleComponents");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'rule_pk': rulePk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RuleComponent];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRules operation.
     * @callback module:api/CheckplanApi~getRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Rule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~getRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Rule>}
     */
    this.getRules = function(rulesetPk, projectPk, checkPlanPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRules");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRules");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRules");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRules");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Rule];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRuleset operation.
     * @callback module:api/CheckplanApi~getRulesetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ruleset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~getRulesetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ruleset}
     */
    this.getRuleset = function(id, projectPk, checkPlanPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRuleset");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleset");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleset");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleset");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ruleset;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRulesets operation.
     * @callback module:api/CheckplanApi~getRulesetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ruleset>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {module:api/CheckplanApi~getRulesetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ruleset>}
     */
    this.getRulesets = function(projectPk, checkPlanPk, cloudPk, callback) {
      var postBody = null;

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRulesets");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRulesets");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRulesets");
      }


      var pathParams = {
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Ruleset];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the launchNewCheck operation.
     * @callback module:api/CheckplanApi~launchNewCheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a new check in the checker
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} cloudPk 
     * @param {module:model/IfcChecker} data 
     * @param {module:api/CheckplanApi~launchNewCheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.launchNewCheck = function(id, projectPk, ifcPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling launchNewCheck");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling launchNewCheck");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling launchNewCheck");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling launchNewCheck");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling launchNewCheck");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}/launch-check', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCheckPlanResult operation.
     * @callback module:api/CheckplanApi~updateCheckPlanResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPlanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {module:model/CheckPlanResult} data 
     * @param {module:api/CheckplanApi~updateCheckPlanResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckPlanResult}
     */
    this.updateCheckPlanResult = function(id, checkerPk, cloudPk, projectPk, ifcPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckPlanResult");
      }

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling updateCheckPlanResult");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCheckPlanResult");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateCheckPlanResult");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateCheckPlanResult");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateCheckPlanResult");
      }


      var pathParams = {
        'id': id,
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ifc_pk': ifcPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlanResult;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChecker operation.
     * @callback module:api/CheckplanApi~updateCheckerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IfcChecker} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} ifcPk 
     * @param {String} cloudPk 
     * @param {module:model/IfcChecker} data 
     * @param {module:api/CheckplanApi~updateCheckerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IfcChecker}
     */
    this.updateChecker = function(id, projectPk, ifcPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChecker");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateChecker");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateChecker");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateChecker");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateChecker");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'ifc_pk': ifcPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IfcChecker;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCheckplan operation.
     * @callback module:api/CheckplanApi~updateCheckplanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} cloudPk 
     * @param {module:model/CheckPlan} data 
     * @param {module:api/CheckplanApi~updateCheckplanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckPlan}
     */
    this.updateCheckplan = function(id, projectPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckplan");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateCheckplan");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCheckplan");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateCheckplan");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlan;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRule operation.
     * @callback module:api/CheckplanApi~updateRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} id 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {module:model/Rule} data 
     * @param {module:api/CheckplanApi~updateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    this.updateRule = function(rulesetPk, id, cloudPk, projectPk, checkPlanPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling updateRule");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRule");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRule");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRule");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRule");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateRule");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'id': id,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRuleComponent operation.
     * @callback module:api/CheckplanApi~updateRuleComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleComponent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} rulesetPk 
     * @param {String} id 
     * @param {String} rulePk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {module:model/RuleComponent} data 
     * @param {module:api/CheckplanApi~updateRuleComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleComponent}
     */
    this.updateRuleComponent = function(rulesetPk, id, rulePk, cloudPk, projectPk, checkPlanPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling updateRuleComponent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRuleComponent");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling updateRuleComponent");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRuleComponent");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRuleComponent");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRuleComponent");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateRuleComponent");
      }


      var pathParams = {
        'ruleset_pk': rulesetPk,
        'id': id,
        'rule_pk': rulePk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RuleComponent;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRuleset operation.
     * @callback module:api/CheckplanApi~updateRulesetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ruleset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {String} projectPk 
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {module:model/Ruleset} data 
     * @param {module:api/CheckplanApi~updateRulesetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ruleset}
     */
    this.updateRuleset = function(id, projectPk, checkPlanPk, cloudPk, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRuleset");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRuleset");
      }

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRuleset");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRuleset");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateRuleset");
      }


      var pathParams = {
        'id': id,
        'project_pk': projectPk,
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ruleset;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
