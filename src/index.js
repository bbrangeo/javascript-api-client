/**
 * BIMData API
 * BIMData API documentation
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActionEvent', 'model/BimSnippet', 'model/Bitmap', 'model/ClippingPlane', 'model/Cloud', 'model/Coloring', 'model/Comment', 'model/CommentAction', 'model/CommentEvent', 'model/Component', 'model/ComponentsParent', 'model/Direction', 'model/DocumentReference', 'model/ElementClassificationRelation', 'model/ElementPropertySetRelation', 'model/EventAction', 'model/Extensions', 'model/Feature', 'model/FosUser', 'model/FosUserWrite', 'model/IfcFiles', 'model/Label', 'model/LineSeriaizer', 'model/Notification', 'model/OrthogonalCamera', 'model/PerspectiveCamera', 'model/Point', 'model/Priority', 'model/ProjectAction', 'model/RelatedTopic', 'model/SelfUser', 'model/SignupFosUser', 'model/Snapshot', 'model/SnippetType', 'model/Stage', 'model/TopicAction', 'model/TopicEvents', 'model/TopicStatus', 'model/TopicType', 'model/User', 'model/Version', 'model/ViewSetupHints', 'model/Viewpoint', 'model/Visibility', 'model/WrappedClass', 'api/BcfApi', 'api/CheckplanApi', 'api/CloudApi', 'api/IfcApi', 'api/ProjectApi', 'api/UserApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ActionEvent'), require('./model/BimSnippet'), require('./model/Bitmap'), require('./model/ClippingPlane'), require('./model/Cloud'), require('./model/Coloring'), require('./model/Comment'), require('./model/CommentAction'), require('./model/CommentEvent'), require('./model/Component'), require('./model/ComponentsParent'), require('./model/Direction'), require('./model/DocumentReference'), require('./model/ElementClassificationRelation'), require('./model/ElementPropertySetRelation'), require('./model/EventAction'), require('./model/Extensions'), require('./model/Feature'), require('./model/FosUser'), require('./model/FosUserWrite'), require('./model/IfcFiles'), require('./model/Label'), require('./model/LineSeriaizer'), require('./model/Notification'), require('./model/OrthogonalCamera'), require('./model/PerspectiveCamera'), require('./model/Point'), require('./model/Priority'), require('./model/ProjectAction'), require('./model/RelatedTopic'), require('./model/SelfUser'), require('./model/SignupFosUser'), require('./model/Snapshot'), require('./model/SnippetType'), require('./model/Stage'), require('./model/TopicAction'), require('./model/TopicEvents'), require('./model/TopicStatus'), require('./model/TopicType'), require('./model/User'), require('./model/Version'), require('./model/ViewSetupHints'), require('./model/Viewpoint'), require('./model/Visibility'), require('./model/WrappedClass'), require('./api/BcfApi'), require('./api/CheckplanApi'), require('./api/CloudApi'), require('./api/IfcApi'), require('./api/ProjectApi'), require('./api/UserApi'));
  }
}(function(ApiClient, ActionEvent, BimSnippet, Bitmap, ClippingPlane, Cloud, Coloring, Comment, CommentAction, CommentEvent, Component, ComponentsParent, Direction, DocumentReference, ElementClassificationRelation, ElementPropertySetRelation, EventAction, Extensions, Feature, FosUser, FosUserWrite, IfcFiles, Label, LineSeriaizer, Notification, OrthogonalCamera, PerspectiveCamera, Point, Priority, ProjectAction, RelatedTopic, SelfUser, SignupFosUser, Snapshot, SnippetType, Stage, TopicAction, TopicEvents, TopicStatus, TopicType, User, Version, ViewSetupHints, Viewpoint, Visibility, WrappedClass, BcfApi, CheckplanApi, CloudApi, IfcApi, ProjectApi, UserApi) {
  'use strict';

  /**
   * BIMData_API_documentation.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var bimdata = require('index'); // See note below*.
   * var xxxSvc = new bimdata.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new bimdata.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new bimdata.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new bimdata.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.13
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ActionEvent model constructor.
     * @property {module:model/ActionEvent}
     */
    ActionEvent: ActionEvent,
    /**
     * The BimSnippet model constructor.
     * @property {module:model/BimSnippet}
     */
    BimSnippet: BimSnippet,
    /**
     * The Bitmap model constructor.
     * @property {module:model/Bitmap}
     */
    Bitmap: Bitmap,
    /**
     * The ClippingPlane model constructor.
     * @property {module:model/ClippingPlane}
     */
    ClippingPlane: ClippingPlane,
    /**
     * The Cloud model constructor.
     * @property {module:model/Cloud}
     */
    Cloud: Cloud,
    /**
     * The Coloring model constructor.
     * @property {module:model/Coloring}
     */
    Coloring: Coloring,
    /**
     * The Comment model constructor.
     * @property {module:model/Comment}
     */
    Comment: Comment,
    /**
     * The CommentAction model constructor.
     * @property {module:model/CommentAction}
     */
    CommentAction: CommentAction,
    /**
     * The CommentEvent model constructor.
     * @property {module:model/CommentEvent}
     */
    CommentEvent: CommentEvent,
    /**
     * The Component model constructor.
     * @property {module:model/Component}
     */
    Component: Component,
    /**
     * The ComponentsParent model constructor.
     * @property {module:model/ComponentsParent}
     */
    ComponentsParent: ComponentsParent,
    /**
     * The Direction model constructor.
     * @property {module:model/Direction}
     */
    Direction: Direction,
    /**
     * The DocumentReference model constructor.
     * @property {module:model/DocumentReference}
     */
    DocumentReference: DocumentReference,
    /**
     * The ElementClassificationRelation model constructor.
     * @property {module:model/ElementClassificationRelation}
     */
    ElementClassificationRelation: ElementClassificationRelation,
    /**
     * The ElementPropertySetRelation model constructor.
     * @property {module:model/ElementPropertySetRelation}
     */
    ElementPropertySetRelation: ElementPropertySetRelation,
    /**
     * The EventAction model constructor.
     * @property {module:model/EventAction}
     */
    EventAction: EventAction,
    /**
     * The Extensions model constructor.
     * @property {module:model/Extensions}
     */
    Extensions: Extensions,
    /**
     * The Feature model constructor.
     * @property {module:model/Feature}
     */
    Feature: Feature,
    /**
     * The FosUser model constructor.
     * @property {module:model/FosUser}
     */
    FosUser: FosUser,
    /**
     * The FosUserWrite model constructor.
     * @property {module:model/FosUserWrite}
     */
    FosUserWrite: FosUserWrite,
    /**
     * The IfcFiles model constructor.
     * @property {module:model/IfcFiles}
     */
    IfcFiles: IfcFiles,
    /**
     * The Label model constructor.
     * @property {module:model/Label}
     */
    Label: Label,
    /**
     * The LineSeriaizer model constructor.
     * @property {module:model/LineSeriaizer}
     */
    LineSeriaizer: LineSeriaizer,
    /**
     * The Notification model constructor.
     * @property {module:model/Notification}
     */
    Notification: Notification,
    /**
     * The OrthogonalCamera model constructor.
     * @property {module:model/OrthogonalCamera}
     */
    OrthogonalCamera: OrthogonalCamera,
    /**
     * The PerspectiveCamera model constructor.
     * @property {module:model/PerspectiveCamera}
     */
    PerspectiveCamera: PerspectiveCamera,
    /**
     * The Point model constructor.
     * @property {module:model/Point}
     */
    Point: Point,
    /**
     * The Priority model constructor.
     * @property {module:model/Priority}
     */
    Priority: Priority,
    /**
     * The ProjectAction model constructor.
     * @property {module:model/ProjectAction}
     */
    ProjectAction: ProjectAction,
    /**
     * The RelatedTopic model constructor.
     * @property {module:model/RelatedTopic}
     */
    RelatedTopic: RelatedTopic,
    /**
     * The SelfUser model constructor.
     * @property {module:model/SelfUser}
     */
    SelfUser: SelfUser,
    /**
     * The SignupFosUser model constructor.
     * @property {module:model/SignupFosUser}
     */
    SignupFosUser: SignupFosUser,
    /**
     * The Snapshot model constructor.
     * @property {module:model/Snapshot}
     */
    Snapshot: Snapshot,
    /**
     * The SnippetType model constructor.
     * @property {module:model/SnippetType}
     */
    SnippetType: SnippetType,
    /**
     * The Stage model constructor.
     * @property {module:model/Stage}
     */
    Stage: Stage,
    /**
     * The TopicAction model constructor.
     * @property {module:model/TopicAction}
     */
    TopicAction: TopicAction,
    /**
     * The TopicEvents model constructor.
     * @property {module:model/TopicEvents}
     */
    TopicEvents: TopicEvents,
    /**
     * The TopicStatus model constructor.
     * @property {module:model/TopicStatus}
     */
    TopicStatus: TopicStatus,
    /**
     * The TopicType model constructor.
     * @property {module:model/TopicType}
     */
    TopicType: TopicType,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The Version model constructor.
     * @property {module:model/Version}
     */
    Version: Version,
    /**
     * The ViewSetupHints model constructor.
     * @property {module:model/ViewSetupHints}
     */
    ViewSetupHints: ViewSetupHints,
    /**
     * The Viewpoint model constructor.
     * @property {module:model/Viewpoint}
     */
    Viewpoint: Viewpoint,
    /**
     * The Visibility model constructor.
     * @property {module:model/Visibility}
     */
    Visibility: Visibility,
    /**
     * The WrappedClass model constructor.
     * @property {module:model/WrappedClass}
     */
    WrappedClass: WrappedClass,
    /**
     * The BcfApi service constructor.
     * @property {module:api/BcfApi}
     */
    BcfApi: BcfApi,
    /**
     * The CheckplanApi service constructor.
     * @property {module:api/CheckplanApi}
     */
    CheckplanApi: CheckplanApi,
    /**
     * The CloudApi service constructor.
     * @property {module:api/CloudApi}
     */
    CloudApi: CloudApi,
    /**
     * The IfcApi service constructor.
     * @property {module:api/IfcApi}
     */
    IfcApi: IfcApi,
    /**
     * The ProjectApi service constructor.
     * @property {module:api/ProjectApi}
     */
    ProjectApi: ProjectApi,
    /**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
    UserApi: UserApi
  };

  return exports;
}));
